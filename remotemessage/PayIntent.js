/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var remotemessage_TransactionType = require("../remotemessage/TransactionType");
var payments_TaxableAmountRate = require("../payments/TaxableAmountRate");
var payments_ServiceChargeAmount = require("../payments/ServiceChargeAmount");
var payments_VaultedCard = require("../payments/VaultedCard");

  /**
  * @constructor
  */
  PayIntent = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = PayIntent;
      this.action = "com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY";
      this.amount = undefined;
      this.tippableAmount = undefined;
      this.tipAmount = undefined;
      this.taxAmount = undefined;
      this.orderId = undefined;
      this.employeeId = undefined;
      this.transactionType = undefined;
      this.taxableAmountRateList = undefined;
      this.serviceChargeAmount = undefined;
      this.isDisableCashBack = undefined;
      this.isTesting = undefined;
      this.cardEntryMethods = undefined;
      this.voiceAuthCode = undefined;
      this.streetAddress = undefined;
      this.isCardNotPresent = undefined;
      this.cardDataMessage = undefined;
      this.remotePrint = undefined;
      this.transactionNo = undefined;
      this.isForceSwipePinEntry = undefined;
      this.disableRestartTransactionWhenFailed = undefined;
      this.externalPaymentId = undefined;
      this.vaultedCard = undefined;
      this.allowOfflinePayment = undefined;
      this.approveOfflinePaymentWithoutPrompt = undefined;
    },

    /**
    * Set the field value
    * The action to fire in the device (com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY)
    *
    * @param {String} action 
    */
    setAction: function(action) {
      this.action = action;
    },

    /**
    * Get the field value
    * The action to fire in the device (com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY)
      * @return {String} 
    */
    getAction: function() {
      return this.action;
    },

    /**
    * Set the field value
    * Amount for transaction
    *
    * @param {Number|Null} amount must be a long integer, 
    */
    setAmount: function(amount) {
      this.amount = amount;
    },

    /**
    * Get the field value
    * Amount for transaction
      * @return {Number|Null} must be a long integer, 
    */
    getAmount: function() {
      return this.amount;
    },

    /**
    * Set the field value
    * Amount used when calculating on screen tips
    *
    * @param {Number|Null} tippableAmount must be a long integer, 
    */
    setTippableAmount: function(tippableAmount) {
      this.tippableAmount = tippableAmount;
    },

    /**
    * Get the field value
    * Amount used when calculating on screen tips
      * @return {Number|Null} must be a long integer, 
    */
    getTippableAmount: function() {
      return this.tippableAmount;
    },

    /**
    * Set the field value
    * Amount paid in tips
    *
    * @param {Number|Null} tipAmount must be a long integer, 
    */
    setTipAmount: function(tipAmount) {
      this.tipAmount = tipAmount;
    },

    /**
    * Get the field value
    * Amount paid in tips
      * @return {Number|Null} must be a long integer, 
    */
    getTipAmount: function() {
      return this.tipAmount;
    },

    /**
    * Set the field value
    * @param {Number|Null} taxAmount must be a long integer, 
    */
    setTaxAmount: function(taxAmount) {
      this.taxAmount = taxAmount;
    },

    /**
    * Get the field value
    * @return {Number|Null} must be a long integer, 
    */
    getTaxAmount: function() {
      return this.taxAmount;
    },

    /**
    * Set the field value
    * Unique identifier for a order
    *
    * @param {String} orderId 
    */
    setOrderId: function(orderId) {
      this.orderId = orderId;
    },

    /**
    * Get the field value
    * Unique identifier for a order
      * @return {String} 
    */
    getOrderId: function() {
      return this.orderId;
    },

    /**
    * Set the field value
    * Unique identifier for a employee
    *
    * @param {String} employeeId 
    */
    setEmployeeId: function(employeeId) {
      this.employeeId = employeeId;
    },

    /**
    * Get the field value
    * Unique identifier for a employee
      * @return {String} 
    */
    getEmployeeId: function() {
      return this.employeeId;
    },

    /**
    * Set the field value
    * @param {TransactionType} transactionType 
    */
    setTransactionType: function(transactionType) {
      this.transactionType = transactionType;
    },

    /**
    * Get the field value
    * @return {TransactionType} 
    */
    getTransactionType: function() {
      return this.transactionType;
    },

    /**
    * Set the field value
    * @param {Array.<TaxableAmountRate>} taxableAmountRateList An array of 
    */
    setTaxableAmountRateList: function(taxableAmountRateList) {
      this.taxableAmountRateList = taxableAmountRateList;
    },

    /**
    * Get the field value
    * @return {Array.<TaxableAmountRate>} An array of 
    */
    getTaxableAmountRateList: function() {
      return this.taxableAmountRateList;
    },

    /**
    * Set the field value
    * @param {Array.<ServiceChargeAmount>} serviceChargeAmount An array of 
    */
    setServiceChargeAmount: function(serviceChargeAmount) {
      this.serviceChargeAmount = serviceChargeAmount;
    },

    /**
    * Get the field value
    * @return {Array.<ServiceChargeAmount>} An array of 
    */
    getServiceChargeAmount: function() {
      return this.serviceChargeAmount;
    },

    /**
    * Set the field value
    * If true, then cash back will not be offered.
    *
    * @param {Boolean} isDisableCashBack 
    */
    setIsDisableCashBack: function(isDisableCashBack) {
      this.isDisableCashBack = isDisableCashBack;
    },

    /**
    * Get the field value
    * If true, then cash back will not be offered.
      * @return {Boolean} 
    */
    getIsDisableCashBack: function() {
      return this.isDisableCashBack;
    },

    /**
    * Set the field value
    * @param {Boolean} isTesting 
    */
    setIsTesting: function(isTesting) {
      this.isTesting = isTesting;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getIsTesting: function() {
      return this.isTesting;
    },

    /**
    * Set the field value
    * Allowed entry methods
    *
    * @param {Number} cardEntryMethods must be an integer
    */
    setCardEntryMethods: function(cardEntryMethods) {
      this.cardEntryMethods = cardEntryMethods;
    },

    /**
    * Get the field value
    * Allowed entry methods
      * @return {Number} must be an integer
    */
    getCardEntryMethods: function() {
      return this.cardEntryMethods;
    },

    /**
    * Set the field value
    * @param {String} voiceAuthCode 
    */
    setVoiceAuthCode: function(voiceAuthCode) {
      this.voiceAuthCode = voiceAuthCode;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getVoiceAuthCode: function() {
      return this.voiceAuthCode;
    },

    /**
    * Set the field value
    * @param {String} streetAddress 
    */
    setStreetAddress: function(streetAddress) {
      this.streetAddress = streetAddress;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getStreetAddress: function() {
      return this.streetAddress;
    },

    /**
    * Set the field value
    * @param {Boolean} isCardNotPresent 
    */
    setIsCardNotPresent: function(isCardNotPresent) {
      this.isCardNotPresent = isCardNotPresent;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getIsCardNotPresent: function() {
      return this.isCardNotPresent;
    },

    /**
    * Set the field value
    * @param {String} cardDataMessage 
    */
    setCardDataMessage: function(cardDataMessage) {
      this.cardDataMessage = cardDataMessage;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getCardDataMessage: function() {
      return this.cardDataMessage;
    },

    /**
    * Set the field value
    * If true, then the receiver of this message does NOT print
    *
    * @param {Boolean} remotePrint 
    */
    setRemotePrint: function(remotePrint) {
      this.remotePrint = remotePrint;
    },

    /**
    * Get the field value
    * If true, then the receiver of this message does NOT print
      * @return {Boolean} 
    */
    getRemotePrint: function() {
      return this.remotePrint;
    },

    /**
    * Set the field value
    * @param {String} transactionNo 
    */
    setTransactionNo: function(transactionNo) {
      this.transactionNo = transactionNo;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getTransactionNo: function() {
      return this.transactionNo;
    },

    /**
    * Set the field value
    * @param {Boolean} isForceSwipePinEntry 
    */
    setIsForceSwipePinEntry: function(isForceSwipePinEntry) {
      this.isForceSwipePinEntry = isForceSwipePinEntry;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getIsForceSwipePinEntry: function() {
      return this.isForceSwipePinEntry;
    },

    /**
    * Set the field value
    * @param {Boolean} disableRestartTransactionWhenFailed 
    */
    setDisableRestartTransactionWhenFailed: function(disableRestartTransactionWhenFailed) {
      this.disableRestartTransactionWhenFailed = disableRestartTransactionWhenFailed;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getDisableRestartTransactionWhenFailed: function() {
      return this.disableRestartTransactionWhenFailed;
    },

    /**
    * Set the field value
    * An id that allows an external system to link to a payment.
    *
    * @param {String} externalPaymentId 
    */
    setExternalPaymentId: function(externalPaymentId) {
      this.externalPaymentId = externalPaymentId;
    },

    /**
    * Get the field value
    * An id that allows an external system to link to a payment.
      * @return {String} 
    */
    getExternalPaymentId: function() {
      return this.externalPaymentId;
    },

    /**
    * Set the field value
    * @param {VaultedCard} vaultedCard 
    */
    setVaultedCard: function(vaultedCard) {
      this.vaultedCard = vaultedCard;
    },

    /**
    * Get the field value
    * @return {VaultedCard} 
    */
    getVaultedCard: function() {
      return this.vaultedCard;
    },

    /**
    * Set the field value
    * @param {Boolean|Null} allowOfflinePayment 
    */
    setAllowOfflinePayment: function(allowOfflinePayment) {
      this.allowOfflinePayment = allowOfflinePayment;
    },

    /**
    * Get the field value
    * @return {Boolean|Null} 
    */
    getAllowOfflinePayment: function() {
      return this.allowOfflinePayment;
    },

    /**
    * Set the field value
    * @param {Boolean|Null} approveOfflinePaymentWithoutPrompt 
    */
    setApproveOfflinePaymentWithoutPrompt: function(approveOfflinePaymentWithoutPrompt) {
      this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
    },

    /**
    * Get the field value
    * @return {Boolean|Null} 
    */
    getApproveOfflinePaymentWithoutPrompt: function() {
      return this.approveOfflinePaymentWithoutPrompt;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

PayIntent._meta_ =  {fields:  {}};
PayIntent._meta_.fields["action"] = {};
PayIntent._meta_.fields["action"].type = String;
PayIntent._meta_.fields["amount"] = {};
PayIntent._meta_.fields["amount"].type = Number;
PayIntent._meta_.fields["tippableAmount"] = {};
PayIntent._meta_.fields["tippableAmount"].type = Number;
PayIntent._meta_.fields["tipAmount"] = {};
PayIntent._meta_.fields["tipAmount"].type = Number;
PayIntent._meta_.fields["taxAmount"] = {};
PayIntent._meta_.fields["taxAmount"].type = Number;
PayIntent._meta_.fields["orderId"] = {};
PayIntent._meta_.fields["orderId"].type = String;
PayIntent._meta_.fields["employeeId"] = {};
PayIntent._meta_.fields["employeeId"].type = String;
PayIntent._meta_.fields["transactionType"] = {};
PayIntent._meta_.fields["transactionType"].type = remotemessage_TransactionType;
PayIntent._meta_.fields["taxableAmountRateList"] = {};
PayIntent._meta_.fields["taxableAmountRateList"].type = Array;
PayIntent._meta_.fields["taxableAmountRateList"].elementType = payments_TaxableAmountRate;
PayIntent._meta_.fields["serviceChargeAmount"] = {};
PayIntent._meta_.fields["serviceChargeAmount"].type = Array;
PayIntent._meta_.fields["serviceChargeAmount"].elementType = payments_ServiceChargeAmount;
PayIntent._meta_.fields["isDisableCashBack"] = {};
PayIntent._meta_.fields["isDisableCashBack"].type = Boolean;
PayIntent._meta_.fields["isTesting"] = {};
PayIntent._meta_.fields["isTesting"].type = Boolean;
PayIntent._meta_.fields["cardEntryMethods"] = {};
PayIntent._meta_.fields["cardEntryMethods"].type = Number;
PayIntent._meta_.fields["voiceAuthCode"] = {};
PayIntent._meta_.fields["voiceAuthCode"].type = String;
PayIntent._meta_.fields["streetAddress"] = {};
PayIntent._meta_.fields["streetAddress"].type = String;
PayIntent._meta_.fields["isCardNotPresent"] = {};
PayIntent._meta_.fields["isCardNotPresent"].type = Boolean;
PayIntent._meta_.fields["cardDataMessage"] = {};
PayIntent._meta_.fields["cardDataMessage"].type = String;
PayIntent._meta_.fields["remotePrint"] = {};
PayIntent._meta_.fields["remotePrint"].type = Boolean;
PayIntent._meta_.fields["transactionNo"] = {};
PayIntent._meta_.fields["transactionNo"].type = String;
PayIntent._meta_.fields["isForceSwipePinEntry"] = {};
PayIntent._meta_.fields["isForceSwipePinEntry"].type = Boolean;
PayIntent._meta_.fields["disableRestartTransactionWhenFailed"] = {};
PayIntent._meta_.fields["disableRestartTransactionWhenFailed"].type = Boolean;
PayIntent._meta_.fields["externalPaymentId"] = {};
PayIntent._meta_.fields["externalPaymentId"].type = String;
PayIntent._meta_.fields["vaultedCard"] = {};
PayIntent._meta_.fields["vaultedCard"].type = payments_VaultedCard;
PayIntent._meta_.fields["allowOfflinePayment"] = {};
PayIntent._meta_.fields["allowOfflinePayment"].type = Boolean;
PayIntent._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
PayIntent._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = PayIntent;
}

