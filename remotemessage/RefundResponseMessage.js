/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var remotemessage_Method = require("../remotemessage/Method");
var remotemessage_TxState = require("../remotemessage/TxState");
var remotemessage_Message = require("../remotemessage/Message");
var remotemessage_ErrorCode = require("../remotemessage/ErrorCode");
var payments_Refund = require("../payments/Refund");

  /**
  * @constructor
  */
  RefundResponseMessage = Class.create(remotemessage_Message, {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function($super) {
      $super();
      this._class_ = RefundResponseMessage;
      this.setMethod(remotemessage_Method["REFUND_RESPONSE"]);
      this.orderId = undefined;
      this.paymentId = undefined;
      this.refund = undefined;
      this.reason = undefined;
      this.message = undefined;
      this.code = undefined;
    },

    /**
    * Set the field value
    * Unique identifier for a order
    *
    * @param {String} orderId 
    */
    setOrderId: function(orderId) {
      this.orderId = orderId;
    },

    /**
    * Get the field value
    * Unique identifier for a order
      * @return {String} 
    */
    getOrderId: function() {
      return this.orderId;
    },

    /**
    * Set the field value
    * Unique identifier for a payment
    *
    * @param {String} paymentId 
    */
    setPaymentId: function(paymentId) {
      this.paymentId = paymentId;
    },

    /**
    * Get the field value
    * Unique identifier for a payment
      * @return {String} 
    */
    getPaymentId: function() {
      return this.paymentId;
    },

    /**
    * Set the field value
    * The refund
    *
    * @param {Refund} refund 
    */
    setRefund: function(refund) {
      this.refund = refund;
    },

    /**
    * Get the field value
    * The refund
      * @return {Refund} 
    */
    getRefund: function() {
      return this.refund;
    },

    /**
    * Set the field value
    * Detail code if an error is encountered
    *
    * @param {ErrorCode} reason 
    */
    setReason: function(reason) {
      this.reason = reason;
    },

    /**
    * Get the field value
    * Detail code if an error is encountered
      * @return {ErrorCode} 
    */
    getReason: function() {
      return this.reason;
    },

    /**
    * Set the field value
    * Detail message
    *
    * @param {String} message 
    */
    setMessage: function(message) {
      this.message = message;
    },

    /**
    * Get the field value
    * Detail message
      * @return {String} 
    */
    getMessage: function() {
      return this.message;
    },

    /**
    * Set the field value
    * Transaction state (success|fail)
    *
    * @param {TxState} code 
    */
    setCode: function(code) {
      this.code = code;
    },

    /**
    * Get the field value
    * Transaction state (success|fail)
      * @return {TxState} 
    */
    getCode: function() {
      return this.code;
    }
  });

RefundResponseMessage._meta_ =  {fields:  {}};
RefundResponseMessage._meta_.fields["orderId"] = {};
RefundResponseMessage._meta_.fields["orderId"].type = String;
RefundResponseMessage._meta_.fields["paymentId"] = {};
RefundResponseMessage._meta_.fields["paymentId"].type = String;
RefundResponseMessage._meta_.fields["refund"] = {};
RefundResponseMessage._meta_.fields["refund"].type = payments_Refund;
RefundResponseMessage._meta_.fields["reason"] = {};
RefundResponseMessage._meta_.fields["reason"].type = remotemessage_ErrorCode;
RefundResponseMessage._meta_.fields["message"] = {};
RefundResponseMessage._meta_.fields["message"].type = String;
RefundResponseMessage._meta_.fields["code"] = {};
RefundResponseMessage._meta_.fields["code"].type = remotemessage_TxState;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = RefundResponseMessage;
}

