/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var Class = require("../Class.js");
var inventory_ItemStock = require("../inventory/ItemStock");
var inventory_TaxRate = require("../inventory/TaxRate");
var inventory_ModifierGroup = require("../inventory/ModifierGroup");
var inventory_PriceType = require("../inventory/PriceType");
var inventory_Category = require("../inventory/Category");
var base_Reference = require("../base/Reference");
var inventory_Tag = require("../inventory/Tag");
var inventory_Option = require("../inventory/Option");

  /**
  * @constructor
  * @memberof inventory
  */
  Item = Class.create( {
    /**
    * Initialize the values for this.
    * @memberof inventory.Item
    * @private
    */
    initialize: function() {
      this._class_ = Item;
      this.id = undefined;
      this.hidden = false;
      this.itemGroup = undefined;
      this.options = undefined;
      this.name = undefined;
      this.alternateName = undefined;
      this.code = undefined;
      this.sku = undefined;
      this.price = undefined;
      this.priceType = undefined;
      this.defaultTaxRates = true;
      this.unitName = undefined;
      this.cost = undefined;
      this.isRevenue = false;
      this.stockCount = undefined;
      this.taxRates = undefined;
      this.modifierGroups = undefined;
      this.categories = undefined;
      this.tags = undefined;
      this.itemStock = undefined;
      this.modifiedTime = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @memberof inventory.Item
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
    * @memberof inventory.Item
    * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * True if this item is hidden from Clover Register App
    *
    * @memberof inventory.Item
    * @param {Boolean} hidden 
    */
    setHidden: function(hidden) {
      this.hidden = hidden;
    },

    /**
    * Get the field value
    * True if this item is hidden from Clover Register App
    * @memberof inventory.Item
    * @return {Boolean} 
    */
    getHidden: function() {
      return this.hidden;
    },

    /**
    * Set the field value
    * Reference to an item group
    *
    * @memberof inventory.Item
    * @param {Null|base.Reference} itemGroup 
    */
    setItemGroup: function(itemGroup) {
      this.itemGroup = itemGroup;
    },

    /**
    * Get the field value
    * Reference to an item group
    * @memberof inventory.Item
    * @return {Null|base.Reference} 
    */
    getItemGroup: function() {
      return this.itemGroup;
    },

    /**
    * Set the field value
    * List of options pertaining to this item's attribute variation
    *
    * @memberof inventory.Item
    * @param {Array.<inventory.Option>} options An array of 
    */
    setOptions: function(options) {
      this.options = options;
    },

    /**
    * Get the field value
    * List of options pertaining to this item's attribute variation
    * @memberof inventory.Item
    * @return {Array.<inventory.Option>} An array of 
    */
    getOptions: function() {
      return this.options;
    },

    /**
    * Set the field value
    * Name of the item
    *
    * @memberof inventory.Item
    * @param {String} name 
    */
    setName: function(name) {
      this.name = name;
    },

    /**
    * Get the field value
    * Name of the item
    * @memberof inventory.Item
    * @return {String} 
    */
    getName: function() {
      return this.name;
    },

    /**
    * Set the field value
    * Alternate name of the item
    *
    * @memberof inventory.Item
    * @param {Null|String} alternateName 
    */
    setAlternateName: function(alternateName) {
      this.alternateName = alternateName;
    },

    /**
    * Get the field value
    * Alternate name of the item
    * @memberof inventory.Item
    * @return {Null|String} 
    */
    getAlternateName: function() {
      return this.alternateName;
    },

    /**
    * Set the field value
    * Product code, e.g. UPC or EAN
    *
    * @memberof inventory.Item
    * @param {Null|String} code 
    */
    setCode: function(code) {
      this.code = code;
    },

    /**
    * Get the field value
    * Product code, e.g. UPC or EAN
    * @memberof inventory.Item
    * @return {Null|String} 
    */
    getCode: function() {
      return this.code;
    },

    /**
    * Set the field value
    * SKU of the item
    *
    * @memberof inventory.Item
    * @param {Null|String} sku 
    */
    setSku: function(sku) {
      this.sku = sku;
    },

    /**
    * Get the field value
    * SKU of the item
    * @memberof inventory.Item
    * @return {Null|String} 
    */
    getSku: function() {
      return this.sku;
    },

    /**
    * Set the field value
    * Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
    *
    * @memberof inventory.Item
    * @param {Number} price must be a long integer
    */
    setPrice: function(price) {
      this.price = price;
    },

    /**
    * Get the field value
    * Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
    * @memberof inventory.Item
    * @return {Number} must be a long integer
    */
    getPrice: function() {
      return this.price;
    },

    /**
    * Set the field value
    * @memberof inventory.Item
    * @param {inventory.PriceType} priceType 
    */
    setPriceType: function(priceType) {
      this.priceType = priceType;
    },

    /**
    * Get the field value
    * @memberof inventory.Item
    * @return {inventory.PriceType} 
    */
    getPriceType: function() {
      return this.priceType;
    },

    /**
    * Set the field value
    * Flag to indicate whether or not to use default tax rates
    *
    * @memberof inventory.Item
    * @param {Boolean} defaultTaxRates 
    */
    setDefaultTaxRates: function(defaultTaxRates) {
      this.defaultTaxRates = defaultTaxRates;
    },

    /**
    * Get the field value
    * Flag to indicate whether or not to use default tax rates
    * @memberof inventory.Item
    * @return {Boolean} 
    */
    getDefaultTaxRates: function() {
      return this.defaultTaxRates;
    },

    /**
    * Set the field value
    * Unit name, e.g. oz, lb
    *
    * @memberof inventory.Item
    * @param {Null|String} unitName 
    */
    setUnitName: function(unitName) {
      this.unitName = unitName;
    },

    /**
    * Get the field value
    * Unit name, e.g. oz, lb
    * @memberof inventory.Item
    * @return {Null|String} 
    */
    getUnitName: function() {
      return this.unitName;
    },

    /**
    * Set the field value
    * Cost of the item to merchant, as opposed to customer price
    *
    * @memberof inventory.Item
    * @param {Null|Number} cost must be a long integer
    */
    setCost: function(cost) {
      this.cost = cost;
    },

    /**
    * Get the field value
    * Cost of the item to merchant, as opposed to customer price
    * @memberof inventory.Item
    * @return {Null|Number} must be a long integer
    */
    getCost: function() {
      return this.cost;
    },

    /**
    * Set the field value
    * True if this item should be counted as revenue, for example gift cards and donations would not
    *
    * @memberof inventory.Item
    * @param {Boolean} isRevenue 
    */
    setIsRevenue: function(isRevenue) {
      this.isRevenue = isRevenue;
    },

    /**
    * Get the field value
    * True if this item should be counted as revenue, for example gift cards and donations would not
    * @memberof inventory.Item
    * @return {Boolean} 
    */
    getIsRevenue: function() {
      return this.isRevenue;
    },

    /**
    * Set the field value
    * DEPRECATED: use itemStock instead
    *
    * @memberof inventory.Item
    * @param {Null|Number} stockCount must be a long integer
    */
    setStockCount: function(stockCount) {
      this.stockCount = stockCount;
    },

    /**
    * Get the field value
    * DEPRECATED: use itemStock instead
    * @memberof inventory.Item
    * @return {Null|Number} must be a long integer
    */
    getStockCount: function() {
      return this.stockCount;
    },

    /**
    * Set the field value
    * @memberof inventory.Item
    * @param {Array.<inventory.TaxRate>} taxRates An array of 
    */
    setTaxRates: function(taxRates) {
      this.taxRates = taxRates;
    },

    /**
    * Get the field value
    * @memberof inventory.Item
    * @return {Array.<inventory.TaxRate>} An array of 
    */
    getTaxRates: function() {
      return this.taxRates;
    },

    /**
    * Set the field value
    * @memberof inventory.Item
    * @param {Array.<inventory.ModifierGroup>} modifierGroups An array of 
    */
    setModifierGroups: function(modifierGroups) {
      this.modifierGroups = modifierGroups;
    },

    /**
    * Get the field value
    * @memberof inventory.Item
    * @return {Array.<inventory.ModifierGroup>} An array of 
    */
    getModifierGroups: function() {
      return this.modifierGroups;
    },

    /**
    * Set the field value
    * Categories associated with this item
    *
    * @memberof inventory.Item
    * @param {Array.<inventory.Category>} categories An array of 
    */
    setCategories: function(categories) {
      this.categories = categories;
    },

    /**
    * Get the field value
    * Categories associated with this item
    * @memberof inventory.Item
    * @return {Array.<inventory.Category>} An array of 
    */
    getCategories: function() {
      return this.categories;
    },

    /**
    * Set the field value
    * Tags associated with this item
    *
    * @memberof inventory.Item
    * @param {Array.<inventory.Tag>} tags An array of 
    */
    setTags: function(tags) {
      this.tags = tags;
    },

    /**
    * Get the field value
    * Tags associated with this item
    * @memberof inventory.Item
    * @return {Array.<inventory.Tag>} An array of 
    */
    getTags: function() {
      return this.tags;
    },

    /**
    * Set the field value
    * Item stock attribute that can be expanded to show stock quantity
    *
    * @memberof inventory.Item
    * @param {Null|inventory.ItemStock} itemStock 
    */
    setItemStock: function(itemStock) {
      this.itemStock = itemStock;
    },

    /**
    * Get the field value
    * Item stock attribute that can be expanded to show stock quantity
    * @memberof inventory.Item
    * @return {Null|inventory.ItemStock} 
    */
    getItemStock: function() {
      return this.itemStock;
    },

    /**
    * Set the field value
    * @memberof inventory.Item
    * @param {Number} modifiedTime must be a long integer
    */
    setModifiedTime: function(modifiedTime) {
      this.modifiedTime = modifiedTime;
    },

    /**
    * Get the field value
    * @memberof inventory.Item
    * @return {Number} must be a long integer
    */
    getModifiedTime: function() {
      return this.modifiedTime;
    },

    /**
    * @memberof inventory.Item
    * @private
    */
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

Item._meta_ =  {fields:  {}};
Item._meta_.fields["id"] = {};
Item._meta_.fields["id"].type = String;
Item._meta_.fields["hidden"] = {};
Item._meta_.fields["hidden"].type = Boolean;
Item._meta_.fields["itemGroup"] = {};
Item._meta_.fields["itemGroup"].type = base_Reference;
Item._meta_.fields["options"] = {};
Item._meta_.fields["options"].type = Array;
Item._meta_.fields["options"].elementType = inventory_Option;
Item._meta_.fields["name"] = {};
Item._meta_.fields["name"].type = String;
Item._meta_.fields["alternateName"] = {};
Item._meta_.fields["alternateName"].type = String;
Item._meta_.fields["code"] = {};
Item._meta_.fields["code"].type = String;
Item._meta_.fields["sku"] = {};
Item._meta_.fields["sku"].type = String;
Item._meta_.fields["price"] = {};
Item._meta_.fields["price"].type = Number;
Item._meta_.fields["priceType"] = {};
Item._meta_.fields["priceType"].type = inventory_PriceType;
Item._meta_.fields["defaultTaxRates"] = {};
Item._meta_.fields["defaultTaxRates"].type = Boolean;
Item._meta_.fields["unitName"] = {};
Item._meta_.fields["unitName"].type = String;
Item._meta_.fields["cost"] = {};
Item._meta_.fields["cost"].type = Number;
Item._meta_.fields["isRevenue"] = {};
Item._meta_.fields["isRevenue"].type = Boolean;
Item._meta_.fields["stockCount"] = {};
Item._meta_.fields["stockCount"].type = Number;
Item._meta_.fields["taxRates"] = {};
Item._meta_.fields["taxRates"].type = Array;
Item._meta_.fields["taxRates"].elementType = inventory_TaxRate;
Item._meta_.fields["modifierGroups"] = {};
Item._meta_.fields["modifierGroups"].type = Array;
Item._meta_.fields["modifierGroups"].elementType = inventory_ModifierGroup;
Item._meta_.fields["categories"] = {};
Item._meta_.fields["categories"].type = Array;
Item._meta_.fields["categories"].elementType = inventory_Category;
Item._meta_.fields["tags"] = {};
Item._meta_.fields["tags"].type = Array;
Item._meta_.fields["tags"].elementType = inventory_Tag;
Item._meta_.fields["itemStock"] = {};
Item._meta_.fields["itemStock"].type = inventory_ItemStock;
Item._meta_.fields["modifiedTime"] = {};
Item._meta_.fields["modifiedTime"].type = Number;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Item;
}

