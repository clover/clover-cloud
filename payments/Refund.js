/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var payments_TaxableAmountRate = require("../payments/TaxableAmountRate");
var payments_ServiceChargeAmount = require("../payments/ServiceChargeAmount");
var base_Reference = require("../base/Reference");
var base_Tender = require("../base/Tender");

  /**
  * @constructor
  */
  Refund = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = Refund;
      this.id = undefined;
      this.orderRef = undefined;
      this.device = undefined;
      this.amount = undefined;
      this.taxAmount = undefined;
      this.createdTime = undefined;
      this.clientCreatedTime = undefined;
      this.payment = undefined;
      this.employee = undefined;
      this.lineItems = undefined;
      this.overrideMerchantTender = undefined;
      this.taxableAmountRates = undefined;
      this.serviceChargeAmount = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * The order with which the refund is associated
    *
    * @param {Reference} orderRef 
    */
    setOrderRef: function(orderRef) {
      this.orderRef = orderRef;
    },

    /**
    * Get the field value
    * The order with which the refund is associated
      * @return {Reference} 
    */
    getOrderRef: function() {
      return this.orderRef;
    },

    /**
    * Set the field value
    * Device which processed the transaction for this refund
    *
    * @param {Reference|Null} device 
    */
    setDevice: function(device) {
      this.device = device;
    },

    /**
    * Get the field value
    * Device which processed the transaction for this refund
      * @return {Reference|Null} 
    */
    getDevice: function() {
      return this.device;
    },

    /**
    * Set the field value
    * Total amount refunded, including tax
    *
    * @param {Number} amount must be a long integer
    */
    setAmount: function(amount) {
      this.amount = amount;
    },

    /**
    * Get the field value
    * Total amount refunded, including tax
      * @return {Number} must be a long integer
    */
    getAmount: function() {
      return this.amount;
    },

    /**
    * Set the field value
    * Tax amount refunded
    *
    * @param {Number|Null} taxAmount must be a long integer, 
    */
    setTaxAmount: function(taxAmount) {
      this.taxAmount = taxAmount;
    },

    /**
    * Get the field value
    * Tax amount refunded
      * @return {Number|Null} must be a long integer, 
    */
    getTaxAmount: function() {
      return this.taxAmount;
    },

    /**
    * Set the field value
    * The time when the refund was recorded on the server
    *
    * @param {Number} createdTime must be a long integer
    */
    setCreatedTime: function(createdTime) {
      this.createdTime = createdTime;
    },

    /**
    * Get the field value
    * The time when the refund was recorded on the server
      * @return {Number} must be a long integer
    */
    getCreatedTime: function() {
      return this.createdTime;
    },

    /**
    * Set the field value
    * The time when the refund was recorded on the client
    *
    * @param {Number} clientCreatedTime must be a long integer
    */
    setClientCreatedTime: function(clientCreatedTime) {
      this.clientCreatedTime = clientCreatedTime;
    },

    /**
    * Get the field value
    * The time when the refund was recorded on the client
      * @return {Number} must be a long integer
    */
    getClientCreatedTime: function() {
      return this.clientCreatedTime;
    },

    /**
    * Set the field value
    * The payment with which the refund is associated
    *
    * @param {Reference} payment 
    */
    setPayment: function(payment) {
      this.payment = payment;
    },

    /**
    * Get the field value
    * The payment with which the refund is associated
      * @return {Reference} 
    */
    getPayment: function() {
      return this.payment;
    },

    /**
    * Set the field value
    * @param {Reference} employee 
    */
    setEmployee: function(employee) {
      this.employee = employee;
    },

    /**
    * Get the field value
    * @return {Reference} 
    */
    getEmployee: function() {
      return this.employee;
    },

    /**
    * Set the field value
    * @param {Array.<Reference>} lineItems An array of 
    */
    setLineItems: function(lineItems) {
      this.lineItems = lineItems;
    },

    /**
    * Get the field value
    * @return {Array.<Reference>} An array of 
    */
    getLineItems: function() {
      return this.lineItems;
    },

    /**
    * Set the field value
    * The tender type associated with this payment, e.g. credit card, cash, etc.
    *
    * @param {Tender} overrideMerchantTender 
    */
    setOverrideMerchantTender: function(overrideMerchantTender) {
      this.overrideMerchantTender = overrideMerchantTender;
    },

    /**
    * Get the field value
    * The tender type associated with this payment, e.g. credit card, cash, etc.
      * @return {Tender} 
    */
    getOverrideMerchantTender: function() {
      return this.overrideMerchantTender;
    },

    /**
    * Set the field value
    * @param {Array.<TaxableAmountRate>} taxableAmountRates An array of 
    */
    setTaxableAmountRates: function(taxableAmountRates) {
      this.taxableAmountRates = taxableAmountRates;
    },

    /**
    * Get the field value
    * @return {Array.<TaxableAmountRate>} An array of 
    */
    getTaxableAmountRates: function() {
      return this.taxableAmountRates;
    },

    /**
    * Set the field value
    * @param {ServiceChargeAmount} serviceChargeAmount 
    */
    setServiceChargeAmount: function(serviceChargeAmount) {
      this.serviceChargeAmount = serviceChargeAmount;
    },

    /**
    * Get the field value
    * @return {ServiceChargeAmount} 
    */
    getServiceChargeAmount: function() {
      return this.serviceChargeAmount;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

Refund._meta_ =  {fields:  {}};
Refund._meta_.fields["id"] = {};
Refund._meta_.fields["id"].type = String;
Refund._meta_.fields["orderRef"] = {};
Refund._meta_.fields["orderRef"].type = base_Reference;
Refund._meta_.fields["device"] = {};
Refund._meta_.fields["device"].type = base_Reference;
Refund._meta_.fields["amount"] = {};
Refund._meta_.fields["amount"].type = Number;
Refund._meta_.fields["taxAmount"] = {};
Refund._meta_.fields["taxAmount"].type = Number;
Refund._meta_.fields["createdTime"] = {};
Refund._meta_.fields["createdTime"].type = Number;
Refund._meta_.fields["clientCreatedTime"] = {};
Refund._meta_.fields["clientCreatedTime"].type = Number;
Refund._meta_.fields["payment"] = {};
Refund._meta_.fields["payment"].type = base_Reference;
Refund._meta_.fields["employee"] = {};
Refund._meta_.fields["employee"].type = base_Reference;
Refund._meta_.fields["lineItems"] = {};
Refund._meta_.fields["lineItems"].type = Array;
Refund._meta_.fields["lineItems"].elementType = base_Reference;
Refund._meta_.fields["overrideMerchantTender"] = {};
Refund._meta_.fields["overrideMerchantTender"].type = base_Tender;
Refund._meta_.fields["taxableAmountRates"] = {};
Refund._meta_.fields["taxableAmountRates"].type = Array;
Refund._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
Refund._meta_.fields["serviceChargeAmount"] = {};
Refund._meta_.fields["serviceChargeAmount"].type = payments_ServiceChargeAmount;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Refund;
}

