/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var payments_CardTransaction = require("../payments/CardTransaction");
var payments_LineItemPayment = require("../payments/LineItemPayment");
var order_VoidReason = require("../order/VoidReason");
var payments_Result = require("../payments/Result");
var payments_ServiceChargeAmount = require("../payments/ServiceChargeAmount");
var payments_PaymentTaxRate = require("../payments/PaymentTaxRate");
var base_Reference = require("../base/Reference");
var base_Tender = require("../base/Tender");
var payments_Refund = require("../payments/Refund");

  /**
  * @constructor
  */
  Payment = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = Payment;
      this.id = undefined;
      this.order = undefined;
      this.device = undefined;
      this.tender = undefined;
      this.amount = undefined;
      this.tipAmount = undefined;
      this.taxAmount = undefined;
      this.cashbackAmount = undefined;
      this.cashTendered = undefined;
      this.externalPaymentId = undefined;
      this.employee = undefined;
      this.createdTime = undefined;
      this.clientCreatedTime = undefined;
      this.modifiedTime = undefined;
      this.offline = false;
      this.result = undefined;
      this.cardTransaction = undefined;
      this.serviceCharge = undefined;
      this.taxRates = undefined;
      this.refunds = undefined;
      this.note = undefined;
      this.lineItemPayments = undefined;
      this.voidReason = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * The order with which the payment is associated
    *
    * @param {Reference} order 
    */
    setOrder: function(order) {
      this.order = order;
    },

    /**
    * Get the field value
    * The order with which the payment is associated
      * @return {Reference} 
    */
    getOrder: function() {
      return this.order;
    },

    /**
    * Set the field value
    * Device which processed the transaction for this payment
    *
    * @param {Reference|Null} device 
    */
    setDevice: function(device) {
      this.device = device;
    },

    /**
    * Get the field value
    * Device which processed the transaction for this payment
      * @return {Reference|Null} 
    */
    getDevice: function() {
      return this.device;
    },

    /**
    * Set the field value
    * The tender type associated with this payment, e.g. credit card, cash, etc.
    *
    * @param {Tender} tender 
    */
    setTender: function(tender) {
      this.tender = tender;
    },

    /**
    * Get the field value
    * The tender type associated with this payment, e.g. credit card, cash, etc.
      * @return {Tender} 
    */
    getTender: function() {
      return this.tender;
    },

    /**
    * Set the field value
    * Total amount paid
    *
    * @param {Number} amount must be a long integer
    */
    setAmount: function(amount) {
      this.amount = amount;
    },

    /**
    * Get the field value
    * Total amount paid
      * @return {Number} must be a long integer
    */
    getAmount: function() {
      return this.amount;
    },

    /**
    * Set the field value
    * Amount paid in tips
    *
    * @param {Number|Null} tipAmount must be a long integer, 
    */
    setTipAmount: function(tipAmount) {
      this.tipAmount = tipAmount;
    },

    /**
    * Get the field value
    * Amount paid in tips
      * @return {Number|Null} must be a long integer, 
    */
    getTipAmount: function() {
      return this.tipAmount;
    },

    /**
    * Set the field value
    * Amount paid in tax
    *
    * @param {Number|Null} taxAmount must be a long integer, 
    */
    setTaxAmount: function(taxAmount) {
      this.taxAmount = taxAmount;
    },

    /**
    * Get the field value
    * Amount paid in tax
      * @return {Number|Null} must be a long integer, 
    */
    getTaxAmount: function() {
      return this.taxAmount;
    },

    /**
    * Set the field value
    * Amount given back in a cash back transaction
    *
    * @param {Number|Null} cashbackAmount must be a long integer, 
    */
    setCashbackAmount: function(cashbackAmount) {
      this.cashbackAmount = cashbackAmount;
    },

    /**
    * Get the field value
    * Amount given back in a cash back transaction
      * @return {Number|Null} must be a long integer, 
    */
    getCashbackAmount: function() {
      return this.cashbackAmount;
    },

    /**
    * Set the field value
    * Amount of cash given by the customer
    *
    * @param {Number|Null} cashTendered must be a long integer, 
    */
    setCashTendered: function(cashTendered) {
      this.cashTendered = cashTendered;
    },

    /**
    * Get the field value
    * Amount of cash given by the customer
      * @return {Number|Null} must be a long integer, 
    */
    getCashTendered: function() {
      return this.cashTendered;
    },

    /**
    * Set the field value
    * @param {String} externalPaymentId 
    */
    setExternalPaymentId: function(externalPaymentId) {
      this.externalPaymentId = externalPaymentId;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getExternalPaymentId: function() {
      return this.externalPaymentId;
    },

    /**
    * Set the field value
    * The employee who processed the payment
    *
    * @param {Reference} employee 
    */
    setEmployee: function(employee) {
      this.employee = employee;
    },

    /**
    * Get the field value
    * The employee who processed the payment
      * @return {Reference} 
    */
    getEmployee: function() {
      return this.employee;
    },

    /**
    * Set the field value
    * Time payment was recorded on server
    *
    * @param {Number} createdTime must be a long integer
    */
    setCreatedTime: function(createdTime) {
      this.createdTime = createdTime;
    },

    /**
    * Get the field value
    * Time payment was recorded on server
      * @return {Number} must be a long integer
    */
    getCreatedTime: function() {
      return this.createdTime;
    },

    /**
    * Set the field value
    * @param {Number} clientCreatedTime must be a long integer
    */
    setClientCreatedTime: function(clientCreatedTime) {
      this.clientCreatedTime = clientCreatedTime;
    },

    /**
    * Get the field value
    * @return {Number} must be a long integer
    */
    getClientCreatedTime: function() {
      return this.clientCreatedTime;
    },

    /**
    * Set the field value
    * Last modified time of the payment
    *
    * @param {Number} modifiedTime must be a long integer
    */
    setModifiedTime: function(modifiedTime) {
      this.modifiedTime = modifiedTime;
    },

    /**
    * Get the field value
    * Last modified time of the payment
      * @return {Number} must be a long integer
    */
    getModifiedTime: function() {
      return this.modifiedTime;
    },

    /**
    * Set the field value
    * @param {Boolean} offline 
    */
    setOffline: function(offline) {
      this.offline = offline;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getOffline: function() {
      return this.offline;
    },

    /**
    * Set the field value
    * @param {Result} result 
    */
    setResult: function(result) {
      this.result = result;
    },

    /**
    * Get the field value
    * @return {Result} 
    */
    getResult: function() {
      return this.result;
    },

    /**
    * Set the field value
    * Information about the card used for credit/debit card payments
    *
    * @param {CardTransaction} cardTransaction 
    */
    setCardTransaction: function(cardTransaction) {
      this.cardTransaction = cardTransaction;
    },

    /**
    * Get the field value
    * Information about the card used for credit/debit card payments
      * @return {CardTransaction} 
    */
    getCardTransaction: function() {
      return this.cardTransaction;
    },

    /**
    * Set the field value
    * Amount record as a service charge
    *
    * @param {ServiceChargeAmount} serviceCharge 
    */
    setServiceCharge: function(serviceCharge) {
      this.serviceCharge = serviceCharge;
    },

    /**
    * Get the field value
    * Amount record as a service charge
      * @return {ServiceChargeAmount} 
    */
    getServiceCharge: function() {
      return this.serviceCharge;
    },

    /**
    * Set the field value
    * @param {Array.<PaymentTaxRate>} taxRates An array of 
    */
    setTaxRates: function(taxRates) {
      this.taxRates = taxRates;
    },

    /**
    * Get the field value
    * @return {Array.<PaymentTaxRate>} An array of 
    */
    getTaxRates: function() {
      return this.taxRates;
    },

    /**
    * Set the field value
    * @param {Array.<Refund>} refunds An array of 
    */
    setRefunds: function(refunds) {
      this.refunds = refunds;
    },

    /**
    * Get the field value
    * @return {Array.<Refund>} An array of 
    */
    getRefunds: function() {
      return this.refunds;
    },

    /**
    * Set the field value
    * @param {String} note 
    */
    setNote: function(note) {
      this.note = note;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getNote: function() {
      return this.note;
    },

    /**
    * Set the field value
    * @param {Array.<LineItemPayment>} lineItemPayments An array of 
    */
    setLineItemPayments: function(lineItemPayments) {
      this.lineItemPayments = lineItemPayments;
    },

    /**
    * Get the field value
    * @return {Array.<LineItemPayment>} An array of 
    */
    getLineItemPayments: function() {
      return this.lineItemPayments;
    },

    /**
    * Set the field value
    * If voided, the reason why (when available)
    *
    * @param {VoidReason} voidReason 
    */
    setVoidReason: function(voidReason) {
      this.voidReason = voidReason;
    },

    /**
    * Get the field value
    * If voided, the reason why (when available)
      * @return {VoidReason} 
    */
    getVoidReason: function() {
      return this.voidReason;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

Payment._meta_ =  {fields:  {}};
Payment._meta_.fields["id"] = {};
Payment._meta_.fields["id"].type = String;
Payment._meta_.fields["order"] = {};
Payment._meta_.fields["order"].type = base_Reference;
Payment._meta_.fields["device"] = {};
Payment._meta_.fields["device"].type = base_Reference;
Payment._meta_.fields["tender"] = {};
Payment._meta_.fields["tender"].type = base_Tender;
Payment._meta_.fields["amount"] = {};
Payment._meta_.fields["amount"].type = Number;
Payment._meta_.fields["tipAmount"] = {};
Payment._meta_.fields["tipAmount"].type = Number;
Payment._meta_.fields["taxAmount"] = {};
Payment._meta_.fields["taxAmount"].type = Number;
Payment._meta_.fields["cashbackAmount"] = {};
Payment._meta_.fields["cashbackAmount"].type = Number;
Payment._meta_.fields["cashTendered"] = {};
Payment._meta_.fields["cashTendered"].type = Number;
Payment._meta_.fields["externalPaymentId"] = {};
Payment._meta_.fields["externalPaymentId"].type = String;
Payment._meta_.fields["employee"] = {};
Payment._meta_.fields["employee"].type = base_Reference;
Payment._meta_.fields["createdTime"] = {};
Payment._meta_.fields["createdTime"].type = Number;
Payment._meta_.fields["clientCreatedTime"] = {};
Payment._meta_.fields["clientCreatedTime"].type = Number;
Payment._meta_.fields["modifiedTime"] = {};
Payment._meta_.fields["modifiedTime"].type = Number;
Payment._meta_.fields["offline"] = {};
Payment._meta_.fields["offline"].type = Boolean;
Payment._meta_.fields["result"] = {};
Payment._meta_.fields["result"].type = payments_Result;
Payment._meta_.fields["cardTransaction"] = {};
Payment._meta_.fields["cardTransaction"].type = payments_CardTransaction;
Payment._meta_.fields["serviceCharge"] = {};
Payment._meta_.fields["serviceCharge"].type = payments_ServiceChargeAmount;
Payment._meta_.fields["taxRates"] = {};
Payment._meta_.fields["taxRates"].type = Array;
Payment._meta_.fields["taxRates"].elementType = payments_PaymentTaxRate;
Payment._meta_.fields["refunds"] = {};
Payment._meta_.fields["refunds"].type = Array;
Payment._meta_.fields["refunds"].elementType = payments_Refund;
Payment._meta_.fields["note"] = {};
Payment._meta_.fields["note"].type = String;
Payment._meta_.fields["lineItemPayments"] = {};
Payment._meta_.fields["lineItemPayments"].type = Array;
Payment._meta_.fields["lineItemPayments"].elementType = payments_LineItemPayment;
Payment._meta_.fields["voidReason"] = {};
Payment._meta_.fields["voidReason"].type = order_VoidReason;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Payment;
}

