/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var base_Reference = require("../base/Reference");

  /**
  * @constructor
  */
  LineItemPayment = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = LineItemPayment;
      this.id = undefined;
      this.lineItemRef = undefined;
      this.paymentRef = undefined;
      this.percentage = undefined;
      this.binName = undefined;
      this.refunded = undefined;
    },

    /**
    * Set the field value
    * Unique identifier; TBD this is confusing because it's used as either line item id or payment id
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier; TBD this is confusing because it's used as either line item id or payment id
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * The line item with which the line item payment is associated
    *
    * @param {Reference} lineItemRef 
    */
    setLineItemRef: function(lineItemRef) {
      this.lineItemRef = lineItemRef;
    },

    /**
    * Get the field value
    * The line item with which the line item payment is associated
      * @return {Reference} 
    */
    getLineItemRef: function() {
      return this.lineItemRef;
    },

    /**
    * Set the field value
    * The payment with which the line item payment is associated
    *
    * @param {Reference} paymentRef 
    */
    setPaymentRef: function(paymentRef) {
      this.paymentRef = paymentRef;
    },

    /**
    * Get the field value
    * The payment with which the line item payment is associated
      * @return {Reference} 
    */
    getPaymentRef: function() {
      return this.paymentRef;
    },

    /**
    * Set the field value
    * Percent of this line item covered by this payment
    *
    * @param {Number} percentage must be a long integer
    */
    setPercentage: function(percentage) {
      this.percentage = percentage;
    },

    /**
    * Get the field value
    * Percent of this line item covered by this payment
      * @return {Number} must be a long integer
    */
    getPercentage: function() {
      return this.percentage;
    },

    /**
    * Set the field value
    * Bin this line item payment was for
    *
    * @param {Null|String} binName 
    */
    setBinName: function(binName) {
      this.binName = binName;
    },

    /**
    * Get the field value
    * Bin this line item payment was for
      * @return {Null|String} 
    */
    getBinName: function() {
      return this.binName;
    },

    /**
    * Set the field value
    * Payment has been refunded
    *
    * @param {Boolean} refunded 
    */
    setRefunded: function(refunded) {
      this.refunded = refunded;
    },

    /**
    * Get the field value
    * Payment has been refunded
      * @return {Boolean} 
    */
    getRefunded: function() {
      return this.refunded;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

LineItemPayment._meta_ =  {fields:  {}};
LineItemPayment._meta_.fields["id"] = {};
LineItemPayment._meta_.fields["id"].type = String;
LineItemPayment._meta_.fields["lineItemRef"] = {};
LineItemPayment._meta_.fields["lineItemRef"].type = base_Reference;
LineItemPayment._meta_.fields["paymentRef"] = {};
LineItemPayment._meta_.fields["paymentRef"].type = base_Reference;
LineItemPayment._meta_.fields["percentage"] = {};
LineItemPayment._meta_.fields["percentage"].type = Number;
LineItemPayment._meta_.fields["binName"] = {};
LineItemPayment._meta_.fields["binName"].type = String;
LineItemPayment._meta_.fields["refunded"] = {};
LineItemPayment._meta_.fields["refunded"].type = Boolean;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = LineItemPayment;
}

