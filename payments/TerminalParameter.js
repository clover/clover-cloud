/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var payments_Tag = require("../payments/Tag");
var payments_ParamType = require("../payments/ParamType");
var payments_OverrideType = require("../payments/OverrideType");

  /**
  * @constructor
  */
  TerminalParameter = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = TerminalParameter;
      this.id = undefined;
      this.param = undefined;
      this.paramType = undefined;
      this.data = undefined;
      this.deviceType = undefined;
      this.deviceTypeId = undefined;
      this.overrideName = undefined;
      this.overrideId = undefined;
      this.overrideType = undefined;
      this.aid = undefined;
      this.tagData = undefined;
    },

    /**
    * Set the field value
    * Pipe delimited composite key unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Pipe delimited composite key unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * @param {String} param 
    */
    setParam: function(param) {
      this.param = param;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getParam: function() {
      return this.param;
    },

    /**
    * Set the field value
    * @param {ParamType} paramType 
    */
    setParamType: function(paramType) {
      this.paramType = paramType;
    },

    /**
    * Get the field value
    * @return {ParamType} 
    */
    getParamType: function() {
      return this.paramType;
    },

    /**
    * Set the field value
    * @param {String} data 
    */
    setData: function(data) {
      this.data = data;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getData: function() {
      return this.data;
    },

    /**
    * Set the field value
    * @param {String} deviceType 
    */
    setDeviceType: function(deviceType) {
      this.deviceType = deviceType;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getDeviceType: function() {
      return this.deviceType;
    },

    /**
    * Set the field value
    * @param {String} deviceTypeId 
    */
    setDeviceTypeId: function(deviceTypeId) {
      this.deviceTypeId = deviceTypeId;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getDeviceTypeId: function() {
      return this.deviceTypeId;
    },

    /**
    * Set the field value
    * @param {String} overrideName 
    */
    setOverrideName: function(overrideName) {
      this.overrideName = overrideName;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getOverrideName: function() {
      return this.overrideName;
    },

    /**
    * Set the field value
    * @param {String} overrideId 
    */
    setOverrideId: function(overrideId) {
      this.overrideId = overrideId;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getOverrideId: function() {
      return this.overrideId;
    },

    /**
    * Set the field value
    * @param {OverrideType} overrideType 
    */
    setOverrideType: function(overrideType) {
      this.overrideType = overrideType;
    },

    /**
    * Get the field value
    * @return {OverrideType} 
    */
    getOverrideType: function() {
      return this.overrideType;
    },

    /**
    * Set the field value
    * @param {String} aid 
    */
    setAid: function(aid) {
      this.aid = aid;
    },

    /**
    * Get the field value
    * @return {String} 
    */
    getAid: function() {
      return this.aid;
    },

    /**
    * Set the field value
    * @param {Array.<Tag>} tagData An array of 
    */
    setTagData: function(tagData) {
      this.tagData = tagData;
    },

    /**
    * Get the field value
    * @return {Array.<Tag>} An array of 
    */
    getTagData: function() {
      return this.tagData;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

TerminalParameter._meta_ =  {fields:  {}};
TerminalParameter._meta_.fields["id"] = {};
TerminalParameter._meta_.fields["id"].type = String;
TerminalParameter._meta_.fields["param"] = {};
TerminalParameter._meta_.fields["param"].type = String;
TerminalParameter._meta_.fields["paramType"] = {};
TerminalParameter._meta_.fields["paramType"].type = payments_ParamType;
TerminalParameter._meta_.fields["data"] = {};
TerminalParameter._meta_.fields["data"].type = String;
TerminalParameter._meta_.fields["deviceType"] = {};
TerminalParameter._meta_.fields["deviceType"].type = String;
TerminalParameter._meta_.fields["deviceTypeId"] = {};
TerminalParameter._meta_.fields["deviceTypeId"].type = String;
TerminalParameter._meta_.fields["overrideName"] = {};
TerminalParameter._meta_.fields["overrideName"].type = String;
TerminalParameter._meta_.fields["overrideId"] = {};
TerminalParameter._meta_.fields["overrideId"].type = String;
TerminalParameter._meta_.fields["overrideType"] = {};
TerminalParameter._meta_.fields["overrideType"].type = payments_OverrideType;
TerminalParameter._meta_.fields["aid"] = {};
TerminalParameter._meta_.fields["aid"].type = String;
TerminalParameter._meta_.fields["tagData"] = {};
TerminalParameter._meta_.fields["tagData"].type = Array;
TerminalParameter._meta_.fields["tagData"].elementType = payments_Tag;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = TerminalParameter;
}

