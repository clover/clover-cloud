/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var Class = require("../Class.js");
var order_HoursAvailable = require("../order/HoursAvailable");
var hours_HoursSet = require("../hours/HoursSet");
var base_Reference = require("../base/Reference");
var order_CustomerIdMethod = require("../order/CustomerIdMethod");

  /**
  * @constructor
  * @memberof order
  */
  OrderType = Class.create( {
    /**
    * Initialize the values for this.
    * @memberof order.OrderType
    * @private
    */
    initialize: function() {
      this._class_ = OrderType;
      this.id = undefined;
      this.labelKey = undefined;
      this.label = undefined;
      this.taxable = false;
      this.isDefault = false;
      this.filterCategories = false;
      this.isHidden = false;
      this.fee = undefined;
      this.minOrderAmount = undefined;
      this.maxOrderAmount = undefined;
      this.maxRadius = undefined;
      this.avgOrderTime = undefined;
      this.hoursAvailable = undefined;
      this.customerIdMethod = undefined;
      this.isDeleted = false;
      this.systemOrderTypeId = undefined;
      this.hours = undefined;
      this.categories = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @memberof order.OrderType
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
    * @memberof order.OrderType
    * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * Label Key
    *
    * @memberof order.OrderType
    * @param {String} labelKey 
    */
    setLabelKey: function(labelKey) {
      this.labelKey = labelKey;
    },

    /**
    * Get the field value
    * Label Key
    * @memberof order.OrderType
    * @return {String} 
    */
    getLabelKey: function() {
      return this.labelKey;
    },

    /**
    * Set the field value
    * Label Key
    *
    * @memberof order.OrderType
    * @param {String} label 
    */
    setLabel: function(label) {
      this.label = label;
    },

    /**
    * Get the field value
    * Label Key
    * @memberof order.OrderType
    * @return {String} 
    */
    getLabel: function() {
      return this.label;
    },

    /**
    * Set the field value
    * If this order type is taxable
    *
    * @memberof order.OrderType
    * @param {Boolean} taxable 
    */
    setTaxable: function(taxable) {
      this.taxable = taxable;
    },

    /**
    * Get the field value
    * If this order type is taxable
    * @memberof order.OrderType
    * @return {Boolean} 
    */
    getTaxable: function() {
      return this.taxable;
    },

    /**
    * Set the field value
    * If this order type is the default
    *
    * @memberof order.OrderType
    * @param {Boolean} isDefault 
    */
    setIsDefault: function(isDefault) {
      this.isDefault = isDefault;
    },

    /**
    * Get the field value
    * If this order type is the default
    * @memberof order.OrderType
    * @return {Boolean} 
    */
    getIsDefault: function() {
      return this.isDefault;
    },

    /**
    * Set the field value
    * If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
    *
    * @memberof order.OrderType
    * @param {Boolean} filterCategories 
    */
    setFilterCategories: function(filterCategories) {
      this.filterCategories = filterCategories;
    },

    /**
    * Get the field value
    * If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
    * @memberof order.OrderType
    * @return {Boolean} 
    */
    getFilterCategories: function() {
      return this.filterCategories;
    },

    /**
    * Set the field value
    * If this order type is hidden on the register
    *
    * @memberof order.OrderType
    * @param {Boolean} isHidden 
    */
    setIsHidden: function(isHidden) {
      this.isHidden = isHidden;
    },

    /**
    * Get the field value
    * If this order type is hidden on the register
    * @memberof order.OrderType
    * @return {Boolean} 
    */
    getIsHidden: function() {
      return this.isHidden;
    },

    /**
    * Set the field value
    * The price of a fee added to this order type, not fully implemented at this time.
    *
    * @memberof order.OrderType
    * @param {Null|Number} fee must be a long integer
    */
    setFee: function(fee) {
      this.fee = fee;
    },

    /**
    * Get the field value
    * The price of a fee added to this order type, not fully implemented at this time.
    * @memberof order.OrderType
    * @return {Null|Number} must be a long integer
    */
    getFee: function() {
      return this.fee;
    },

    /**
    * Set the field value
    * The minimum amount required for an order to be placed
    *
    * @memberof order.OrderType
    * @param {Null|Number} minOrderAmount must be a long integer
    */
    setMinOrderAmount: function(minOrderAmount) {
      this.minOrderAmount = minOrderAmount;
    },

    /**
    * Get the field value
    * The minimum amount required for an order to be placed
    * @memberof order.OrderType
    * @return {Null|Number} must be a long integer
    */
    getMinOrderAmount: function() {
      return this.minOrderAmount;
    },

    /**
    * Set the field value
    * The maximum amount for an order allowed
    *
    * @memberof order.OrderType
    * @param {Null|Number} maxOrderAmount must be a long integer
    */
    setMaxOrderAmount: function(maxOrderAmount) {
      this.maxOrderAmount = maxOrderAmount;
    },

    /**
    * Get the field value
    * The maximum amount for an order allowed
    * @memberof order.OrderType
    * @return {Null|Number} must be a long integer
    */
    getMaxOrderAmount: function() {
      return this.maxOrderAmount;
    },

    /**
    * Set the field value
    * The maximum radius allowed for an order (i.e. delivery)
    *
    * @memberof order.OrderType
    * @param {Null|Number} maxRadius must be a long integer
    */
    setMaxRadius: function(maxRadius) {
      this.maxRadius = maxRadius;
    },

    /**
    * Get the field value
    * The maximum radius allowed for an order (i.e. delivery)
    * @memberof order.OrderType
    * @return {Null|Number} must be a long integer
    */
    getMaxRadius: function() {
      return this.maxRadius;
    },

    /**
    * Set the field value
    * The average time it takes to complete the order
    *
    * @memberof order.OrderType
    * @param {Null|Number} avgOrderTime must be a long integer
    */
    setAvgOrderTime: function(avgOrderTime) {
      this.avgOrderTime = avgOrderTime;
    },

    /**
    * Get the field value
    * The average time it takes to complete the order
    * @memberof order.OrderType
    * @return {Null|Number} must be a long integer
    */
    getAvgOrderTime: function() {
      return this.avgOrderTime;
    },

    /**
    * Set the field value
    * @memberof order.OrderType
    * @param {order.HoursAvailable} hoursAvailable 
    */
    setHoursAvailable: function(hoursAvailable) {
      this.hoursAvailable = hoursAvailable;
    },

    /**
    * Get the field value
    * @memberof order.OrderType
    * @return {order.HoursAvailable} 
    */
    getHoursAvailable: function() {
      return this.hoursAvailable;
    },

    /**
    * Set the field value
    * @memberof order.OrderType
    * @param {order.CustomerIdMethod} customerIdMethod 
    */
    setCustomerIdMethod: function(customerIdMethod) {
      this.customerIdMethod = customerIdMethod;
    },

    /**
    * Get the field value
    * @memberof order.OrderType
    * @return {order.CustomerIdMethod} 
    */
    getCustomerIdMethod: function() {
      return this.customerIdMethod;
    },

    /**
    * Set the field value
    * If this order type is deleted
    *
    * @memberof order.OrderType
    * @param {Boolean} isDeleted 
    */
    setIsDeleted: function(isDeleted) {
      this.isDeleted = isDeleted;
    },

    /**
    * Get the field value
    * If this order type is deleted
    * @memberof order.OrderType
    * @return {Boolean} 
    */
    getIsDeleted: function() {
      return this.isDeleted;
    },

    /**
    * Set the field value
    * Optional system order type that this order type is associated with.
    *
    * @memberof order.OrderType
    * @param {String} systemOrderTypeId 
    */
    setSystemOrderTypeId: function(systemOrderTypeId) {
      this.systemOrderTypeId = systemOrderTypeId;
    },

    /**
    * Get the field value
    * Optional system order type that this order type is associated with.
    * @memberof order.OrderType
    * @return {String} 
    */
    getSystemOrderTypeId: function() {
      return this.systemOrderTypeId;
    },

    /**
    * Set the field value
    * The hours this order type is available (if they differ from normal merchant hours)
    *
    * @memberof order.OrderType
    * @param {hours.HoursSet} hours 
    */
    setHours: function(hours) {
      this.hours = hours;
    },

    /**
    * Get the field value
    * The hours this order type is available (if they differ from normal merchant hours)
    * @memberof order.OrderType
    * @return {hours.HoursSet} 
    */
    getHours: function() {
      return this.hours;
    },

    /**
    * Set the field value
    * The categories of items that can be assigned to this order type
    *
    * @memberof order.OrderType
    * @param {Array.<base.Reference>} categories An array of 
    */
    setCategories: function(categories) {
      this.categories = categories;
    },

    /**
    * Get the field value
    * The categories of items that can be assigned to this order type
    * @memberof order.OrderType
    * @return {Array.<base.Reference>} An array of 
    */
    getCategories: function() {
      return this.categories;
    },

    /**
    * @memberof order.OrderType
    * @private
    */
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

OrderType._meta_ =  {fields:  {}};
OrderType._meta_.fields["id"] = {};
OrderType._meta_.fields["id"].type = String;
OrderType._meta_.fields["labelKey"] = {};
OrderType._meta_.fields["labelKey"].type = String;
OrderType._meta_.fields["label"] = {};
OrderType._meta_.fields["label"].type = String;
OrderType._meta_.fields["taxable"] = {};
OrderType._meta_.fields["taxable"].type = Boolean;
OrderType._meta_.fields["isDefault"] = {};
OrderType._meta_.fields["isDefault"].type = Boolean;
OrderType._meta_.fields["filterCategories"] = {};
OrderType._meta_.fields["filterCategories"].type = Boolean;
OrderType._meta_.fields["isHidden"] = {};
OrderType._meta_.fields["isHidden"].type = Boolean;
OrderType._meta_.fields["fee"] = {};
OrderType._meta_.fields["fee"].type = Number;
OrderType._meta_.fields["minOrderAmount"] = {};
OrderType._meta_.fields["minOrderAmount"].type = Number;
OrderType._meta_.fields["maxOrderAmount"] = {};
OrderType._meta_.fields["maxOrderAmount"].type = Number;
OrderType._meta_.fields["maxRadius"] = {};
OrderType._meta_.fields["maxRadius"].type = Number;
OrderType._meta_.fields["avgOrderTime"] = {};
OrderType._meta_.fields["avgOrderTime"].type = Number;
OrderType._meta_.fields["hoursAvailable"] = {};
OrderType._meta_.fields["hoursAvailable"].type = order_HoursAvailable;
OrderType._meta_.fields["customerIdMethod"] = {};
OrderType._meta_.fields["customerIdMethod"].type = order_CustomerIdMethod;
OrderType._meta_.fields["isDeleted"] = {};
OrderType._meta_.fields["isDeleted"].type = Boolean;
OrderType._meta_.fields["systemOrderTypeId"] = {};
OrderType._meta_.fields["systemOrderTypeId"].type = String;
OrderType._meta_.fields["hours"] = {};
OrderType._meta_.fields["hours"].type = hours_HoursSet;
OrderType._meta_.fields["categories"] = {};
OrderType._meta_.fields["categories"].type = Array;
OrderType._meta_.fields["categories"].elementType = base_Reference;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = OrderType;
}

