/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var order_DisplayDiscount = require("../order/DisplayDiscount");
var order_DisplayModification = require("../order/DisplayModification");

  /**
  * @constructor
  */
  DisplayLineItem = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = DisplayLineItem;
      this.id = undefined;
      this.orderId = undefined;
      this.name = undefined;
      this.alternateName = undefined;
      this.price = undefined;
      this.unitPrice = undefined;
      this.quantity = undefined;
      this.unitQuantity = undefined;
      this.note = undefined;
      this.printed = "false";
      this.binName = undefined;
      this.userData = undefined;
      this.discounts = undefined;
      this.discountAmount = undefined;
      this.exchanged = "false";
      this.exchangedAmount = undefined;
      this.modifications = undefined;
      this.refunded = "false";
      this.refundedAmount = undefined;
      this.percent = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * The order with which the line item is associated
    *
    * @param {String} orderId 
    */
    setOrderId: function(orderId) {
      this.orderId = orderId;
    },

    /**
    * Get the field value
    * The order with which the line item is associated
      * @return {String} 
    */
    getOrderId: function() {
      return this.orderId;
    },

    /**
    * Set the field value
    * Line item name
    *
    * @param {Null|String} name 
    */
    setName: function(name) {
      this.name = name;
    },

    /**
    * Get the field value
    * Line item name
      * @return {Null|String} 
    */
    getName: function() {
      return this.name;
    },

    /**
    * Set the field value
    * Alternate name of the line item
    *
    * @param {Null|String} alternateName 
    */
    setAlternateName: function(alternateName) {
      this.alternateName = alternateName;
    },

    /**
    * Get the field value
    * Alternate name of the line item
      * @return {Null|String} 
    */
    getAlternateName: function() {
      return this.alternateName;
    },

    /**
    * Set the field value
    * Formatted total price of the line item
    *
    * @param {String} price 
    */
    setPrice: function(price) {
      this.price = price;
    },

    /**
    * Get the field value
    * Formatted total price of the line item
      * @return {String} 
    */
    getPrice: function() {
      return this.price;
    },

    /**
    * Set the field value
    * Formatted unit price in cases if applicable
    *
    * @param {String} unitPrice 
    */
    setUnitPrice: function(unitPrice) {
      this.unitPrice = unitPrice;
    },

    /**
    * Get the field value
    * Formatted unit price in cases if applicable
      * @return {String} 
    */
    getUnitPrice: function() {
      return this.unitPrice;
    },

    /**
    * Set the field value
    * Formatted quantity
    *
    * @param {Null|String} quantity 
    */
    setQuantity: function(quantity) {
      this.quantity = quantity;
    },

    /**
    * Get the field value
    * Formatted quantity
      * @return {Null|String} 
    */
    getQuantity: function() {
      return this.quantity;
    },

    /**
    * Set the field value
    * Formatted unit quantity - such as 10 @ $1.99/oz
    *
    * @param {Null|String} unitQuantity 
    */
    setUnitQuantity: function(unitQuantity) {
      this.unitQuantity = unitQuantity;
    },

    /**
    * Get the field value
    * Formatted unit quantity - such as 10 @ $1.99/oz
      * @return {Null|String} 
    */
    getUnitQuantity: function() {
      return this.unitQuantity;
    },

    /**
    * Set the field value
    * @param {Null|String} note 
    */
    setNote: function(note) {
      this.note = note;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getNote: function() {
      return this.note;
    },

    /**
    * Set the field value
    * @param {Boolean} printed 
    */
    setPrinted: function(printed) {
      this.printed = printed;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getPrinted: function() {
      return this.printed;
    },

    /**
    * Set the field value
    * @param {Null|String} binName 
    */
    setBinName: function(binName) {
      this.binName = binName;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getBinName: function() {
      return this.binName;
    },

    /**
    * Set the field value
    * @param {Null|String} userData 
    */
    setUserData: function(userData) {
      this.userData = userData;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getUserData: function() {
      return this.userData;
    },

    /**
    * Set the field value
    * @param {Array.<DisplayDiscount>} discounts An array of 
    */
    setDiscounts: function(discounts) {
      this.discounts = discounts;
    },

    /**
    * Get the field value
    * @return {Array.<DisplayDiscount>} An array of 
    */
    getDiscounts: function() {
      return this.discounts;
    },

    /**
    * Set the field value
    * @param {Null|String} discountAmount 
    */
    setDiscountAmount: function(discountAmount) {
      this.discountAmount = discountAmount;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getDiscountAmount: function() {
      return this.discountAmount;
    },

    /**
    * Set the field value
    * @param {Boolean} exchanged 
    */
    setExchanged: function(exchanged) {
      this.exchanged = exchanged;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getExchanged: function() {
      return this.exchanged;
    },

    /**
    * Set the field value
    * Formatted exchanged amount
    *
    * @param {Null|String} exchangedAmount 
    */
    setExchangedAmount: function(exchangedAmount) {
      this.exchangedAmount = exchangedAmount;
    },

    /**
    * Get the field value
    * Formatted exchanged amount
      * @return {Null|String} 
    */
    getExchangedAmount: function() {
      return this.exchangedAmount;
    },

    /**
    * Set the field value
    * @param {Array.<DisplayModification>} modifications An array of 
    */
    setModifications: function(modifications) {
      this.modifications = modifications;
    },

    /**
    * Get the field value
    * @return {Array.<DisplayModification>} An array of 
    */
    getModifications: function() {
      return this.modifications;
    },

    /**
    * Set the field value
    * @param {Boolean} refunded 
    */
    setRefunded: function(refunded) {
      this.refunded = refunded;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getRefunded: function() {
      return this.refunded;
    },

    /**
    * Set the field value
    * Formatted refunded amount
    *
    * @param {Null|String} refundedAmount 
    */
    setRefundedAmount: function(refundedAmount) {
      this.refundedAmount = refundedAmount;
    },

    /**
    * Get the field value
    * Formatted refunded amount
      * @return {Null|String} 
    */
    getRefundedAmount: function() {
      return this.refundedAmount;
    },

    /**
    * Set the field value
    * @param {Null|String} percent 
    */
    setPercent: function(percent) {
      this.percent = percent;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getPercent: function() {
      return this.percent;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

DisplayLineItem._meta_ =  {fields:  {}};
DisplayLineItem._meta_.fields["id"] = {};
DisplayLineItem._meta_.fields["id"].type = String;
DisplayLineItem._meta_.fields["orderId"] = {};
DisplayLineItem._meta_.fields["orderId"].type = String;
DisplayLineItem._meta_.fields["name"] = {};
DisplayLineItem._meta_.fields["name"].type = String;
DisplayLineItem._meta_.fields["alternateName"] = {};
DisplayLineItem._meta_.fields["alternateName"].type = String;
DisplayLineItem._meta_.fields["price"] = {};
DisplayLineItem._meta_.fields["price"].type = String;
DisplayLineItem._meta_.fields["unitPrice"] = {};
DisplayLineItem._meta_.fields["unitPrice"].type = String;
DisplayLineItem._meta_.fields["quantity"] = {};
DisplayLineItem._meta_.fields["quantity"].type = String;
DisplayLineItem._meta_.fields["unitQuantity"] = {};
DisplayLineItem._meta_.fields["unitQuantity"].type = String;
DisplayLineItem._meta_.fields["note"] = {};
DisplayLineItem._meta_.fields["note"].type = String;
DisplayLineItem._meta_.fields["printed"] = {};
DisplayLineItem._meta_.fields["printed"].type = Boolean;
DisplayLineItem._meta_.fields["binName"] = {};
DisplayLineItem._meta_.fields["binName"].type = String;
DisplayLineItem._meta_.fields["userData"] = {};
DisplayLineItem._meta_.fields["userData"].type = String;
DisplayLineItem._meta_.fields["discounts"] = {};
DisplayLineItem._meta_.fields["discounts"].type = Array;
DisplayLineItem._meta_.fields["discounts"].elementType = order_DisplayDiscount;
DisplayLineItem._meta_.fields["discountAmount"] = {};
DisplayLineItem._meta_.fields["discountAmount"].type = String;
DisplayLineItem._meta_.fields["exchanged"] = {};
DisplayLineItem._meta_.fields["exchanged"].type = Boolean;
DisplayLineItem._meta_.fields["exchangedAmount"] = {};
DisplayLineItem._meta_.fields["exchangedAmount"].type = String;
DisplayLineItem._meta_.fields["modifications"] = {};
DisplayLineItem._meta_.fields["modifications"].type = Array;
DisplayLineItem._meta_.fields["modifications"].elementType = order_DisplayModification;
DisplayLineItem._meta_.fields["refunded"] = {};
DisplayLineItem._meta_.fields["refunded"].type = Boolean;
DisplayLineItem._meta_.fields["refundedAmount"] = {};
DisplayLineItem._meta_.fields["refundedAmount"].type = String;
DisplayLineItem._meta_.fields["percent"] = {};
DisplayLineItem._meta_.fields["percent"].type = String;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = DisplayLineItem;
}

