/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var customers_Customer = require("../customers/Customer");
var order_Discount = require("../order/Discount");
var order_PayType = require("../order/PayType");
var order_LineItem = require("../order/LineItem");
var order_OrderType = require("../order/OrderType");
var payments_Payment = require("../payments/Payment");
var base_Reference = require("../base/Reference");
var base_ServiceCharge = require("../base/ServiceCharge");
var order_OrderTaxRate = require("../order/OrderTaxRate");
var payments_Refund = require("../payments/Refund");
var payments_Credit = require("../payments/Credit");

  /**
  * @constructor
  */
  Order = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = Order;
      this.id = undefined;
      this.currency = undefined;
      this.customers = undefined;
      this.employee = undefined;
      this.total = undefined;
      this.title = undefined;
      this.note = undefined;
      this.orderType = undefined;
      this.taxRemoved = false;
      this.isVat = undefined;
      this.state = undefined;
      this.manualTransaction = undefined;
      this.groupLineItems = undefined;
      this.testMode = undefined;
      this.payType = undefined;
      this.createdTime = undefined;
      this.clientCreatedTime = undefined;
      this.modifiedTime = undefined;
      this.deletedTimestamp = undefined;
      this.serviceCharge = undefined;
      this.discounts = undefined;
      this.lineItems = undefined;
      this.taxRates = undefined;
      this.payments = undefined;
      this.refunds = undefined;
      this.credits = undefined;
      this.voids = undefined;
      this.device = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * Currency of this order
    *
    * @param {String} currency 
    */
    setCurrency: function(currency) {
      this.currency = currency;
    },

    /**
    * Get the field value
    * Currency of this order
      * @return {String} 
    */
    getCurrency: function() {
      return this.currency;
    },

    /**
    * Set the field value
    * @param {Array.<Customer>} customers An array of 
    */
    setCustomers: function(customers) {
      this.customers = customers;
    },

    /**
    * Get the field value
    * @return {Array.<Customer>} An array of 
    */
    getCustomers: function() {
      return this.customers;
    },

    /**
    * Set the field value
    * The employee who took this order
    *
    * @param {Null|Reference} employee 
    */
    setEmployee: function(employee) {
      this.employee = employee;
    },

    /**
    * Get the field value
    * The employee who took this order
      * @return {Null|Reference} 
    */
    getEmployee: function() {
      return this.employee;
    },

    /**
    * Set the field value
    * Total price of the order
    *
    * @param {Null|Number} total must be a long integer
    */
    setTotal: function(total) {
      this.total = total;
    },

    /**
    * Get the field value
    * Total price of the order
      * @return {Null|Number} must be a long integer
    */
    getTotal: function() {
      return this.total;
    },

    /**
    * Set the field value
    * @param {Null|String} title 
    */
    setTitle: function(title) {
      this.title = title;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getTitle: function() {
      return this.title;
    },

    /**
    * Set the field value
    * @param {Null|String} note 
    */
    setNote: function(note) {
      this.note = note;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getNote: function() {
      return this.note;
    },

    /**
    * Set the field value
    * @param {Null|OrderType} orderType 
    */
    setOrderType: function(orderType) {
      this.orderType = orderType;
    },

    /**
    * Get the field value
    * @return {Null|OrderType} 
    */
    getOrderType: function() {
      return this.orderType;
    },

    /**
    * Set the field value
    * @param {Boolean} taxRemoved 
    */
    setTaxRemoved: function(taxRemoved) {
      this.taxRemoved = taxRemoved;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getTaxRemoved: function() {
      return this.taxRemoved;
    },

    /**
    * Set the field value
    * @param {Boolean} isVat 
    */
    setIsVat: function(isVat) {
      this.isVat = isVat;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getIsVat: function() {
      return this.isVat;
    },

    /**
    * Set the field value
    * @param {Null|String} state 
    */
    setState: function(state) {
      this.state = state;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getState: function() {
      return this.state;
    },

    /**
    * Set the field value
    * @param {Boolean} manualTransaction 
    */
    setManualTransaction: function(manualTransaction) {
      this.manualTransaction = manualTransaction;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getManualTransaction: function() {
      return this.manualTransaction;
    },

    /**
    * Set the field value
    * @param {Boolean} groupLineItems 
    */
    setGroupLineItems: function(groupLineItems) {
      this.groupLineItems = groupLineItems;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getGroupLineItems: function() {
      return this.groupLineItems;
    },

    /**
    * Set the field value
    * @param {Boolean} testMode 
    */
    setTestMode: function(testMode) {
      this.testMode = testMode;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getTestMode: function() {
      return this.testMode;
    },

    /**
    * Set the field value
    * @param {Null|PayType} payType 
    */
    setPayType: function(payType) {
      this.payType = payType;
    },

    /**
    * Get the field value
    * @return {Null|PayType} 
    */
    getPayType: function() {
      return this.payType;
    },

    /**
    * Set the field value
    * Creation timestamp
    *
    * @param {Number} createdTime must be a long integer
    */
    setCreatedTime: function(createdTime) {
      this.createdTime = createdTime;
    },

    /**
    * Get the field value
    * Creation timestamp
      * @return {Number} must be a long integer
    */
    getCreatedTime: function() {
      return this.createdTime;
    },

    /**
    * Set the field value
    * @param {Number} clientCreatedTime must be a long integer
    */
    setClientCreatedTime: function(clientCreatedTime) {
      this.clientCreatedTime = clientCreatedTime;
    },

    /**
    * Get the field value
    * @return {Number} must be a long integer
    */
    getClientCreatedTime: function() {
      return this.clientCreatedTime;
    },

    /**
    * Set the field value
    * Last modified time of the order
    *
    * @param {Number} modifiedTime must be a long integer
    */
    setModifiedTime: function(modifiedTime) {
      this.modifiedTime = modifiedTime;
    },

    /**
    * Get the field value
    * Last modified time of the order
      * @return {Number} must be a long integer
    */
    getModifiedTime: function() {
      return this.modifiedTime;
    },

    /**
    * Set the field value
    * @param {Number} deletedTimestamp must be a long integer
    */
    setDeletedTimestamp: function(deletedTimestamp) {
      this.deletedTimestamp = deletedTimestamp;
    },

    /**
    * Get the field value
    * @return {Number} must be a long integer
    */
    getDeletedTimestamp: function() {
      return this.deletedTimestamp;
    },

    /**
    * Set the field value
    * Optional service charge (gratuity) applied to this order
    *
    * @param {Null|ServiceCharge} serviceCharge 
    */
    setServiceCharge: function(serviceCharge) {
      this.serviceCharge = serviceCharge;
    },

    /**
    * Get the field value
    * Optional service charge (gratuity) applied to this order
      * @return {Null|ServiceCharge} 
    */
    getServiceCharge: function() {
      return this.serviceCharge;
    },

    /**
    * Set the field value
    * @param {Array.<Discount>} discounts An array of 
    */
    setDiscounts: function(discounts) {
      this.discounts = discounts;
    },

    /**
    * Get the field value
    * @return {Array.<Discount>} An array of 
    */
    getDiscounts: function() {
      return this.discounts;
    },

    /**
    * Set the field value
    * @param {Array.<LineItem>} lineItems An array of 
    */
    setLineItems: function(lineItems) {
      this.lineItems = lineItems;
    },

    /**
    * Get the field value
    * @return {Array.<LineItem>} An array of 
    */
    getLineItems: function() {
      return this.lineItems;
    },

    /**
    * Set the field value
    * @param {Array.<OrderTaxRate>} taxRates An array of 
    */
    setTaxRates: function(taxRates) {
      this.taxRates = taxRates;
    },

    /**
    * Get the field value
    * @return {Array.<OrderTaxRate>} An array of 
    */
    getTaxRates: function() {
      return this.taxRates;
    },

    /**
    * Set the field value
    * Payments that were made for this order
    *
    * @param {Array.<Payment>} payments An array of 
    */
    setPayments: function(payments) {
      this.payments = payments;
    },

    /**
    * Get the field value
    * Payments that were made for this order
      * @return {Array.<Payment>} An array of 
    */
    getPayments: function() {
      return this.payments;
    },

    /**
    * Set the field value
    * Refunds that were made for this order
    *
    * @param {Array.<Refund>} refunds An array of 
    */
    setRefunds: function(refunds) {
      this.refunds = refunds;
    },

    /**
    * Get the field value
    * Refunds that were made for this order
      * @return {Array.<Refund>} An array of 
    */
    getRefunds: function() {
      return this.refunds;
    },

    /**
    * Set the field value
    * @param {Array.<Credit>} credits An array of 
    */
    setCredits: function(credits) {
      this.credits = credits;
    },

    /**
    * Get the field value
    * @return {Array.<Credit>} An array of 
    */
    getCredits: function() {
      return this.credits;
    },

    /**
    * Set the field value
    * Voided payments associated with this order
    *
    * @param {Array.<Payment>} voids An array of 
    */
    setVoids: function(voids) {
      this.voids = voids;
    },

    /**
    * Get the field value
    * Voided payments associated with this order
      * @return {Array.<Payment>} An array of 
    */
    getVoids: function() {
      return this.voids;
    },

    /**
    * Set the field value
    * Device which created the order
    *
    * @param {Reference|Null} device 
    */
    setDevice: function(device) {
      this.device = device;
    },

    /**
    * Get the field value
    * Device which created the order
      * @return {Reference|Null} 
    */
    getDevice: function() {
      return this.device;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

Order._meta_ =  {fields:  {}};
Order._meta_.fields["id"] = {};
Order._meta_.fields["id"].type = String;
Order._meta_.fields["currency"] = {};
Order._meta_.fields["currency"].type = String;
Order._meta_.fields["customers"] = {};
Order._meta_.fields["customers"].type = Array;
Order._meta_.fields["customers"].elementType = customers_Customer;
Order._meta_.fields["employee"] = {};
Order._meta_.fields["employee"].type = base_Reference;
Order._meta_.fields["total"] = {};
Order._meta_.fields["total"].type = Number;
Order._meta_.fields["title"] = {};
Order._meta_.fields["title"].type = String;
Order._meta_.fields["note"] = {};
Order._meta_.fields["note"].type = String;
Order._meta_.fields["orderType"] = {};
Order._meta_.fields["orderType"].type = order_OrderType;
Order._meta_.fields["taxRemoved"] = {};
Order._meta_.fields["taxRemoved"].type = Boolean;
Order._meta_.fields["isVat"] = {};
Order._meta_.fields["isVat"].type = Boolean;
Order._meta_.fields["state"] = {};
Order._meta_.fields["state"].type = String;
Order._meta_.fields["manualTransaction"] = {};
Order._meta_.fields["manualTransaction"].type = Boolean;
Order._meta_.fields["groupLineItems"] = {};
Order._meta_.fields["groupLineItems"].type = Boolean;
Order._meta_.fields["testMode"] = {};
Order._meta_.fields["testMode"].type = Boolean;
Order._meta_.fields["payType"] = {};
Order._meta_.fields["payType"].type = order_PayType;
Order._meta_.fields["createdTime"] = {};
Order._meta_.fields["createdTime"].type = Number;
Order._meta_.fields["clientCreatedTime"] = {};
Order._meta_.fields["clientCreatedTime"].type = Number;
Order._meta_.fields["modifiedTime"] = {};
Order._meta_.fields["modifiedTime"].type = Number;
Order._meta_.fields["deletedTimestamp"] = {};
Order._meta_.fields["deletedTimestamp"].type = Number;
Order._meta_.fields["serviceCharge"] = {};
Order._meta_.fields["serviceCharge"].type = base_ServiceCharge;
Order._meta_.fields["discounts"] = {};
Order._meta_.fields["discounts"].type = Array;
Order._meta_.fields["discounts"].elementType = order_Discount;
Order._meta_.fields["lineItems"] = {};
Order._meta_.fields["lineItems"].type = Array;
Order._meta_.fields["lineItems"].elementType = order_LineItem;
Order._meta_.fields["taxRates"] = {};
Order._meta_.fields["taxRates"].type = Array;
Order._meta_.fields["taxRates"].elementType = order_OrderTaxRate;
Order._meta_.fields["payments"] = {};
Order._meta_.fields["payments"].type = Array;
Order._meta_.fields["payments"].elementType = payments_Payment;
Order._meta_.fields["refunds"] = {};
Order._meta_.fields["refunds"].type = Array;
Order._meta_.fields["refunds"].elementType = payments_Refund;
Order._meta_.fields["credits"] = {};
Order._meta_.fields["credits"].type = Array;
Order._meta_.fields["credits"].elementType = payments_Credit;
Order._meta_.fields["voids"] = {};
Order._meta_.fields["voids"].type = Array;
Order._meta_.fields["voids"].elementType = payments_Payment;
Order._meta_.fields["device"] = {};
Order._meta_.fields["device"].type = base_Reference;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Order;
}

