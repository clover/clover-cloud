/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var order_Modification = require("../order/Modification");
var inventory_TaxRate = require("../inventory/TaxRate");
var payments_LineItemPayment = require("../payments/LineItemPayment");
var order_Discount = require("../order/Discount");
var base_Reference = require("../base/Reference");

  /**
  * @constructor
  */
  LineItem = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = LineItem;
      this.id = undefined;
      this.orderRef = undefined;
      this.item = undefined;
      this.name = undefined;
      this.alternateName = undefined;
      this.price = undefined;
      this.unitQty = undefined;
      this.unitName = undefined;
      this.itemCode = undefined;
      this.note = undefined;
      this.printed = false;
      this.exchangedLineItem = undefined;
      this.binName = undefined;
      this.userData = undefined;
      this.createdTime = undefined;
      this.orderClientCreatedTime = undefined;
      this.discounts = undefined;
      this.discountAmount = undefined;
      this.exchanged = false;
      this.modifications = undefined;
      this.refunded = false;
      this.isRevenue = false;
      this.taxRates = undefined;
      this.payments = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * The order with which the line item is associated
    *
    * @param {Reference} orderRef 
    */
    setOrderRef: function(orderRef) {
      this.orderRef = orderRef;
    },

    /**
    * Get the field value
    * The order with which the line item is associated
      * @return {Reference} 
    */
    getOrderRef: function() {
      return this.orderRef;
    },

    /**
    * Set the field value
    * Inventory item used to create this line item
    *
    * @param {Null|Reference} item 
    */
    setItem: function(item) {
      this.item = item;
    },

    /**
    * Get the field value
    * Inventory item used to create this line item
      * @return {Null|Reference} 
    */
    getItem: function() {
      return this.item;
    },

    /**
    * Set the field value
    * Line item name
    *
    * @param {Null|String} name 
    */
    setName: function(name) {
      this.name = name;
    },

    /**
    * Get the field value
    * Line item name
      * @return {Null|String} 
    */
    getName: function() {
      return this.name;
    },

    /**
    * Set the field value
    * Alternate name of the line item
    *
    * @param {Null|String} alternateName 
    */
    setAlternateName: function(alternateName) {
      this.alternateName = alternateName;
    },

    /**
    * Get the field value
    * Alternate name of the line item
      * @return {Null|String} 
    */
    getAlternateName: function() {
      return this.alternateName;
    },

    /**
    * Set the field value
    * Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
    *
    * @param {Number} price must be a long integer
    */
    setPrice: function(price) {
      this.price = price;
    },

    /**
    * Get the field value
    * Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
      * @return {Number} must be a long integer
    */
    getPrice: function() {
      return this.price;
    },

    /**
    * Set the field value
    * Unit quantity
    *
    * @param {Null|Number} unitQty must be an integer
    */
    setUnitQty: function(unitQty) {
      this.unitQty = unitQty;
    },

    /**
    * Get the field value
    * Unit quantity
      * @return {Null|Number} must be an integer
    */
    getUnitQty: function() {
      return this.unitQty;
    },

    /**
    * Set the field value
    * Unit name (e.g. oz, lb, etc.)
    *
    * @param {Null|String} unitName 
    */
    setUnitName: function(unitName) {
      this.unitName = unitName;
    },

    /**
    * Get the field value
    * Unit name (e.g. oz, lb, etc.)
      * @return {Null|String} 
    */
    getUnitName: function() {
      return this.unitName;
    },

    /**
    * Set the field value
    * @param {Null|String} itemCode 
    */
    setItemCode: function(itemCode) {
      this.itemCode = itemCode;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getItemCode: function() {
      return this.itemCode;
    },

    /**
    * Set the field value
    * @param {Null|String} note 
    */
    setNote: function(note) {
      this.note = note;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getNote: function() {
      return this.note;
    },

    /**
    * Set the field value
    * @param {Boolean} printed 
    */
    setPrinted: function(printed) {
      this.printed = printed;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getPrinted: function() {
      return this.printed;
    },

    /**
    * Set the field value
    * @param {Null|Reference} exchangedLineItem 
    */
    setExchangedLineItem: function(exchangedLineItem) {
      this.exchangedLineItem = exchangedLineItem;
    },

    /**
    * Get the field value
    * @return {Null|Reference} 
    */
    getExchangedLineItem: function() {
      return this.exchangedLineItem;
    },

    /**
    * Set the field value
    * @param {Null|String} binName 
    */
    setBinName: function(binName) {
      this.binName = binName;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getBinName: function() {
      return this.binName;
    },

    /**
    * Set the field value
    * @param {Null|String} userData 
    */
    setUserData: function(userData) {
      this.userData = userData;
    },

    /**
    * Get the field value
    * @return {Null|String} 
    */
    getUserData: function() {
      return this.userData;
    },

    /**
    * Set the field value
    * @param {Number} createdTime must be a long integer
    */
    setCreatedTime: function(createdTime) {
      this.createdTime = createdTime;
    },

    /**
    * Get the field value
    * @return {Number} must be a long integer
    */
    getCreatedTime: function() {
      return this.createdTime;
    },

    /**
    * Set the field value
    * @param {Number} orderClientCreatedTime must be a long integer
    */
    setOrderClientCreatedTime: function(orderClientCreatedTime) {
      this.orderClientCreatedTime = orderClientCreatedTime;
    },

    /**
    * Get the field value
    * @return {Number} must be a long integer
    */
    getOrderClientCreatedTime: function() {
      return this.orderClientCreatedTime;
    },

    /**
    * Set the field value
    * @param {Array.<Discount>} discounts An array of 
    */
    setDiscounts: function(discounts) {
      this.discounts = discounts;
    },

    /**
    * Get the field value
    * @return {Array.<Discount>} An array of 
    */
    getDiscounts: function() {
      return this.discounts;
    },

    /**
    * Set the field value
    * does the calculated flag actually do anything?
    *
    * @param {Null|Number} discountAmount must be a long integer
    */
    setDiscountAmount: function(discountAmount) {
      this.discountAmount = discountAmount;
    },

    /**
    * Get the field value
    * does the calculated flag actually do anything?
      * @return {Null|Number} must be a long integer
    */
    getDiscountAmount: function() {
      return this.discountAmount;
    },

    /**
    * Set the field value
    * @param {Boolean} exchanged 
    */
    setExchanged: function(exchanged) {
      this.exchanged = exchanged;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getExchanged: function() {
      return this.exchanged;
    },

    /**
    * Set the field value
    * @param {Array.<Modification>} modifications An array of 
    */
    setModifications: function(modifications) {
      this.modifications = modifications;
    },

    /**
    * Get the field value
    * @return {Array.<Modification>} An array of 
    */
    getModifications: function() {
      return this.modifications;
    },

    /**
    * Set the field value
    * @param {Boolean} refunded 
    */
    setRefunded: function(refunded) {
      this.refunded = refunded;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getRefunded: function() {
      return this.refunded;
    },

    /**
    * Set the field value
    * True if this item should be counted as revenue, for example gift cards and donations would not
    *
    * @param {Boolean} isRevenue 
    */
    setIsRevenue: function(isRevenue) {
      this.isRevenue = isRevenue;
    },

    /**
    * Get the field value
    * True if this item should be counted as revenue, for example gift cards and donations would not
      * @return {Boolean} 
    */
    getIsRevenue: function() {
      return this.isRevenue;
    },

    /**
    * Set the field value
    * @param {Array.<TaxRate>} taxRates An array of 
    */
    setTaxRates: function(taxRates) {
      this.taxRates = taxRates;
    },

    /**
    * Get the field value
    * @return {Array.<TaxRate>} An array of 
    */
    getTaxRates: function() {
      return this.taxRates;
    },

    /**
    * Set the field value
    * Payments that were made for this line item
    *
    * @param {Array.<LineItemPayment>} payments An array of 
    */
    setPayments: function(payments) {
      this.payments = payments;
    },

    /**
    * Get the field value
    * Payments that were made for this line item
      * @return {Array.<LineItemPayment>} An array of 
    */
    getPayments: function() {
      return this.payments;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

LineItem._meta_ =  {fields:  {}};
LineItem._meta_.fields["id"] = {};
LineItem._meta_.fields["id"].type = String;
LineItem._meta_.fields["orderRef"] = {};
LineItem._meta_.fields["orderRef"].type = base_Reference;
LineItem._meta_.fields["item"] = {};
LineItem._meta_.fields["item"].type = base_Reference;
LineItem._meta_.fields["name"] = {};
LineItem._meta_.fields["name"].type = String;
LineItem._meta_.fields["alternateName"] = {};
LineItem._meta_.fields["alternateName"].type = String;
LineItem._meta_.fields["price"] = {};
LineItem._meta_.fields["price"].type = Number;
LineItem._meta_.fields["unitQty"] = {};
LineItem._meta_.fields["unitQty"].type = Number;
LineItem._meta_.fields["unitName"] = {};
LineItem._meta_.fields["unitName"].type = String;
LineItem._meta_.fields["itemCode"] = {};
LineItem._meta_.fields["itemCode"].type = String;
LineItem._meta_.fields["note"] = {};
LineItem._meta_.fields["note"].type = String;
LineItem._meta_.fields["printed"] = {};
LineItem._meta_.fields["printed"].type = Boolean;
LineItem._meta_.fields["exchangedLineItem"] = {};
LineItem._meta_.fields["exchangedLineItem"].type = base_Reference;
LineItem._meta_.fields["binName"] = {};
LineItem._meta_.fields["binName"].type = String;
LineItem._meta_.fields["userData"] = {};
LineItem._meta_.fields["userData"].type = String;
LineItem._meta_.fields["createdTime"] = {};
LineItem._meta_.fields["createdTime"].type = Number;
LineItem._meta_.fields["orderClientCreatedTime"] = {};
LineItem._meta_.fields["orderClientCreatedTime"].type = Number;
LineItem._meta_.fields["discounts"] = {};
LineItem._meta_.fields["discounts"].type = Array;
LineItem._meta_.fields["discounts"].elementType = order_Discount;
LineItem._meta_.fields["discountAmount"] = {};
LineItem._meta_.fields["discountAmount"].type = Number;
LineItem._meta_.fields["exchanged"] = {};
LineItem._meta_.fields["exchanged"].type = Boolean;
LineItem._meta_.fields["modifications"] = {};
LineItem._meta_.fields["modifications"].type = Array;
LineItem._meta_.fields["modifications"].elementType = order_Modification;
LineItem._meta_.fields["refunded"] = {};
LineItem._meta_.fields["refunded"].type = Boolean;
LineItem._meta_.fields["isRevenue"] = {};
LineItem._meta_.fields["isRevenue"].type = Boolean;
LineItem._meta_.fields["taxRates"] = {};
LineItem._meta_.fields["taxRates"].type = Array;
LineItem._meta_.fields["taxRates"].elementType = inventory_TaxRate;
LineItem._meta_.fields["payments"] = {};
LineItem._meta_.fields["payments"].type = Array;
LineItem._meta_.fields["payments"].elementType = payments_LineItemPayment;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = LineItem;
}

