/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");

  /**
  * @constructor
  */
  DisplayPayment = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = DisplayPayment;
      this.id = undefined;
      this.label = undefined;
      this.amount = undefined;
      this.tipAmount = undefined;
      this.taxAmount = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * Formatted display string for the tender e.g. credit card, cash, etc.
    *
    * @param {String} label 
    */
    setLabel: function(label) {
      this.label = label;
    },

    /**
    * Get the field value
    * Formatted display string for the tender e.g. credit card, cash, etc.
      * @return {String} 
    */
    getLabel: function() {
      return this.label;
    },

    /**
    * Set the field value
    * Formatted total amount paid
    *
    * @param {String} amount 
    */
    setAmount: function(amount) {
      this.amount = amount;
    },

    /**
    * Get the field value
    * Formatted total amount paid
      * @return {String} 
    */
    getAmount: function() {
      return this.amount;
    },

    /**
    * Set the field value
    * Formatted amount paid in tips
    *
    * @param {String|Null} tipAmount 
    */
    setTipAmount: function(tipAmount) {
      this.tipAmount = tipAmount;
    },

    /**
    * Get the field value
    * Formatted amount paid in tips
      * @return {String|Null} 
    */
    getTipAmount: function() {
      return this.tipAmount;
    },

    /**
    * Set the field value
    * Formatted amount paid in tax
    *
    * @param {Number|Null} taxAmount must be a long integer, 
    */
    setTaxAmount: function(taxAmount) {
      this.taxAmount = taxAmount;
    },

    /**
    * Get the field value
    * Formatted amount paid in tax
      * @return {Number|Null} must be a long integer, 
    */
    getTaxAmount: function() {
      return this.taxAmount;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

DisplayPayment._meta_ =  {fields:  {}};
DisplayPayment._meta_.fields["id"] = {};
DisplayPayment._meta_.fields["id"].type = String;
DisplayPayment._meta_.fields["label"] = {};
DisplayPayment._meta_.fields["label"].type = String;
DisplayPayment._meta_.fields["amount"] = {};
DisplayPayment._meta_.fields["amount"].type = String;
DisplayPayment._meta_.fields["tipAmount"] = {};
DisplayPayment._meta_.fields["tipAmount"].type = String;
DisplayPayment._meta_.fields["taxAmount"] = {};
DisplayPayment._meta_.fields["taxAmount"].type = Number;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = DisplayPayment;
}

