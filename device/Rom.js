/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

var Class = require("../Class.js");
var device_RomBuildType = require("../device/RomBuildType");

  /**
  * @constructor
  * @memberof device
  */
  Rom = Class.create( {
    /**
    * Initialize the values for this.
    * @memberof device.Rom
    * @private
    */
    initialize: function() {
      this._class_ = Rom;
      this.id = undefined;
      this.createdAt = undefined;
      this.version = undefined;
      this.versionName = undefined;
      this.description = undefined;
      this.buildType = undefined;
      this.isCritical = undefined;
      this.published = undefined;
      this.enabled = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @memberof device.Rom
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
    * @memberof device.Rom
    * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * When the ROM was created
    *
    * @memberof device.Rom
    * @param {Number} createdAt must be a long integer
    */
    setCreatedAt: function(createdAt) {
      this.createdAt = createdAt;
    },

    /**
    * Get the field value
    * When the ROM was created
    * @memberof device.Rom
    * @return {Number} must be a long integer
    */
    getCreatedAt: function() {
      return this.createdAt;
    },

    /**
    * Set the field value
    * @memberof device.Rom
    * @param {Number} version must be a long integer
    */
    setVersion: function(version) {
      this.version = version;
    },

    /**
    * Get the field value
    * @memberof device.Rom
    * @return {Number} must be a long integer
    */
    getVersion: function() {
      return this.version;
    },

    /**
    * Set the field value
    * @memberof device.Rom
    * @param {String} versionName 
    */
    setVersionName: function(versionName) {
      this.versionName = versionName;
    },

    /**
    * Get the field value
    * @memberof device.Rom
    * @return {String} 
    */
    getVersionName: function() {
      return this.versionName;
    },

    /**
    * Set the field value
    * @memberof device.Rom
    * @param {String} description 
    */
    setDescription: function(description) {
      this.description = description;
    },

    /**
    * Get the field value
    * @memberof device.Rom
    * @return {String} 
    */
    getDescription: function() {
      return this.description;
    },

    /**
    * Set the field value
    * @memberof device.Rom
    * @param {device.RomBuildType} buildType 
    */
    setBuildType: function(buildType) {
      this.buildType = buildType;
    },

    /**
    * Get the field value
    * @memberof device.Rom
    * @return {device.RomBuildType} 
    */
    getBuildType: function() {
      return this.buildType;
    },

    /**
    * Set the field value
    * @memberof device.Rom
    * @param {Boolean} isCritical 
    */
    setIsCritical: function(isCritical) {
      this.isCritical = isCritical;
    },

    /**
    * Get the field value
    * @memberof device.Rom
    * @return {Boolean} 
    */
    getIsCritical: function() {
      return this.isCritical;
    },

    /**
    * Set the field value
    * @memberof device.Rom
    * @param {Boolean} published 
    */
    setPublished: function(published) {
      this.published = published;
    },

    /**
    * Get the field value
    * @memberof device.Rom
    * @return {Boolean} 
    */
    getPublished: function() {
      return this.published;
    },

    /**
    * Set the field value
    * @memberof device.Rom
    * @param {Boolean} enabled 
    */
    setEnabled: function(enabled) {
      this.enabled = enabled;
    },

    /**
    * Get the field value
    * @memberof device.Rom
    * @return {Boolean} 
    */
    getEnabled: function() {
      return this.enabled;
    },

    /**
    * @memberof device.Rom
    * @private
    */
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

Rom._meta_ =  {fields:  {}};
Rom._meta_.fields["id"] = {};
Rom._meta_.fields["id"].type = String;
Rom._meta_.fields["createdAt"] = {};
Rom._meta_.fields["createdAt"].type = Number;
Rom._meta_.fields["version"] = {};
Rom._meta_.fields["version"].type = Number;
Rom._meta_.fields["versionName"] = {};
Rom._meta_.fields["versionName"].type = String;
Rom._meta_.fields["description"] = {};
Rom._meta_.fields["description"].type = String;
Rom._meta_.fields["buildType"] = {};
Rom._meta_.fields["buildType"].type = device_RomBuildType;
Rom._meta_.fields["isCritical"] = {};
Rom._meta_.fields["isCritical"].type = Boolean;
Rom._meta_.fields["published"] = {};
Rom._meta_.fields["published"].type = Boolean;
Rom._meta_.fields["enabled"] = {};
Rom._meta_.fields["enabled"].type = Boolean;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Rom;
}

